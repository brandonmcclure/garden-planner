{"version":3,"sources":["components/Header.js","models/Layout.js","models/Plant.js","models/Plot.js","components/PlantPicker.js","components/SquareFootPlot.js","components/GardenGrid.js","components/GardenControls.js","pages/Designer.js","pages/About.js","pages/Shrine.js","App.js","serviceWorker.js","index.js","images/Penny_1.jpg","images/Penny_2.jpg","images/Penny_3.jpg","images/Penny_4.jpg","images/Penny_5.jpg"],"names":["Header","Navbar","collapseOnSelect","expand","className","Brand","as","Nav","Link","onClick","props","handleSelectPage","Toggle","aria-controls","Collapse","id","activeKey","this","currentPageId","onSelect","selectedKey","pages","map","page","eventKey","key","label","React","Component","layoutObjects","Layout","resource","rows","cols","fill","styles","display","gridTemplateRows","gridTemplateColumns","position","top","left","width","height","find","layout","fetch","then","response","status","json","data","forEach","push","plantObjects","Plant","name","namePlural","name_plural","scientificName","scientific_name","layoutIds","layouts","goodNeighborIds","good_neighbors","badNeighborIds","bad_neighbors","toLowerCase","replace","imageName","defaultLayout","bind","getObject","plant","Plot","plotRow","plotCol","grid","numRows","length","numCols","neighborPlots","row","col","validLoc","neighborPlants","neighbors","plot","filter","Boolean","groups","goodIds","Set","neutralIds","badIds","allObjects","add","delete","idSet","size","Array","from","PlantPicker","state","currentPlantGroup","Object","keys","plantGroups","block","variant","handleSelect","names","sort","join","numGroups","groupNameMap","all","good","neutral","bad","buttonStyle","Math","floor","type","value","onChange","setState","entries","group","style","plants","a","b","localeCompare","Item","action","show","onHide","handleHide","scrollable","closeButton","Body","renderClearPlotButton","renderNeighbors","renderFilters","renderPlantList","SquareFootPlot","plantClass","gridCellStyle","gridArea","i","renderPlants","GardenGrid","sqSizeToShowAllColumns","window","innerWidth","sqSizeToShowAllRows","innerHeight","sqSizeToShowEverything","min","sqSize","max","gridContainerStyles","gridStyles","rowNum","colNum","handleGridClick","GardenControls","btnGroupContainerClass","btnGroupLabelClass","title","options","disabled","option","aria-label","renderDropdownButton","addRowOptions","deleteRowOptions","addColOptions","deleteColOptions","range","createRow","cell","createGrid","cloneGrid","slice","Designer","showPlantPicker","addRow","addCol","clickedRow","clickedCol","history","loadObjectsFromApi","index","splice","String","deleteRow","deleteCol","assign","handlePlantPickerSelection","plantPickerGroups","fluid","renderPlantPicker","maxHeight","overflowY","FlatIconCredit","authorLink","authorTitle","authorLabel","href","About","Shrine","src","pennyPic3","alt","pennyPic4","pennyPic1","pennyPic2","pennyPic5","App","pageId","renderBody","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","module","exports"],"mappings":"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","file":"static/js/main.844a3b4b.chunk.js","sourcesContent":["import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport { Navbar, Nav } from 'react-bootstrap';\r\nimport '../css/theme.css';\r\n\r\n\r\nconst propTypes = {\r\n  pages: PropTypes.arrayOf(\r\n    PropTypes.shape({\r\n      id: PropTypes.string.isRequired,\r\n      label: PropTypes.string.isRequired\r\n    })\r\n  ).isRequired,\r\n  currentPageId: PropTypes.string.isRequired,\r\n  handleSelectPage: PropTypes.func.isRequired\r\n};\r\n\r\n\r\nclass Header extends React.Component {\r\n  render() {\r\n    return (\r\n      <Navbar collapseOnSelect expand=\"md\" className=\"bg-pastel-green\">\r\n        <Navbar.Brand\r\n          as={Nav.Link}\r\n          onClick={() => this.props.handleSelectPage('designer')}\r\n        >\r\n          Penny's Garden Planner\r\n        </Navbar.Brand>\r\n        <Navbar.Toggle aria-controls=\"navbar-actions\" />\r\n        <Navbar.Collapse id=\"navbar-actions\">\r\n          <Nav\r\n            className=\"mr-auto\"\r\n            activeKey={this.props.currentPageId}\r\n            onSelect={selectedKey => this.props.handleSelectPage(selectedKey)}\r\n          >\r\n            {\r\n              this.props.pages.map(page => {\r\n                return <Nav.Link eventKey={page.id} key={page.id}>{page.label}</Nav.Link>;\r\n              })\r\n            }\r\n          </Nav>\r\n        </Navbar.Collapse>\r\n      </Navbar>\r\n    );\r\n  }\r\n}\r\n\r\nHeader.propTypes = propTypes;\r\n\r\nexport default Header;","const layoutObjects = [];\r\n\r\n\r\nexport default class Layout {\r\n  constructor(resource) {\r\n    this.id = resource.id;\r\n    this.rows = resource.rows;\r\n    this.cols = resource.cols;\r\n    this.fill = resource.fill;\r\n    this.styles = {\r\n        display: 'grid',\r\n        gridTemplateRows: `repeat(${resource.rows}, 1fr)`,\r\n        gridTemplateColumns: `repeat(${resource.cols}, 1fr)`,\r\n        position: 'absolute',\r\n        top: 0,\r\n        left: 0,\r\n        width: '100%',\r\n        height: '100%',\r\n    };\r\n  }\r\n\r\n  static getObject(id) {\r\n    return layoutObjects.find(layout => layout.id === id);\r\n  }\r\n\r\n  static allObjects() {\r\n    return layoutObjects;\r\n  }\r\n\r\n  static loadObjectsFromApi() {\r\n    fetch('/backend/layouts/')\r\n      .then(response => {\r\n        return (response.status === 200) ? response.json() : null;\r\n      })\r\n      .then(data => {\r\n        if (data) {\r\n          data.forEach(resource => layoutObjects.push(new Layout(resource)));\r\n        }\r\n      });\r\n  }\r\n}","import Layout from './Layout';\r\n\r\nconst plantObjects = [];\r\n\r\n\r\nexport default class Plant {\r\n  constructor(resource) {\r\n    this.id = resource.id;\r\n    this.name = resource.name;\r\n    this.namePlural = resource.name_plural;\r\n    this.scientificName = resource.scientific_name;\r\n    this.layoutIds = resource.layouts;\r\n    this.goodNeighborIds = resource.good_neighbors;\r\n    this.badNeighborIds = resource.bad_neighbors;\r\n    this.className = resource.name.toLowerCase().replace(/ /g, '-');\r\n    this.imageName = resource.name.toLowerCase().replace(/ /g, '-');\r\n    this.defaultLayout = this.defaultLayout.bind(this);\r\n  }\r\n\r\n  static getObject(id) {\r\n    return plantObjects.find(plant => plant.id === id);\r\n  }\r\n\r\n  static allObjects() {\r\n    return plantObjects;\r\n  }\r\n\r\n  static loadObjectsFromApi() {\r\n    fetch('/backend/plants/')\r\n      .then(response => {\r\n        return (response.status === 200) ? response.json() : null;\r\n      })\r\n      .then(data => {\r\n        if (data) {\r\n          data.forEach(resource => plantObjects.push(new Plant(resource)));\r\n        }\r\n      });\r\n  }\r\n\r\n  defaultLayout() {\r\n    return Layout.getObject(this.layoutIds[0]);\r\n  }\r\n}","import Plant from './Plant';\r\n\r\n\r\nclass Plot {\r\n  constructor(plant = null, layout = null) {\r\n    this.plant = plant;\r\n    this.layout = layout;\r\n  }\r\n\r\n  static neighbors(plotRow, plotCol, grid) {\r\n    // returns the plots surrounding the specified one\r\n    const numRows = grid.length;\r\n    const numCols = grid[0].length;\r\n    const validLoc = (row, col) => (\r\n      row >= 0 &&\r\n      row < numRows &&\r\n      col >= 0 &&\r\n      col < numCols &&\r\n      `${row}_${col}` !== `${plotRow}_${plotCol}`\r\n      );\r\n    const neighborPlots = [];\r\n    [plotRow - 1, plotRow, plotRow + 1].forEach(row => {\r\n      [plotCol - 1, plotCol, plotCol + 1].forEach(col => {\r\n        if (validLoc(row, col)) {\r\n          neighborPlots.push(grid[row][col]);\r\n        }\r\n      })\r\n    });\r\n    return neighborPlots;\r\n  }\r\n\r\n  static plantPickerGroups(plotRow, plotCol, grid) {\r\n    const neighbors = Plot.neighbors(plotRow, plotCol, grid);\r\n    const neighborPlants = neighbors.map(plot => plot.plant).filter(Boolean);\r\n    const groups = {};\r\n    const [goodIds, neutralIds, badIds] = [new Set(), new Set(), new Set()];\r\n\r\n    if (neighborPlants.length === 0) {\r\n      // If there are no neighbors to consider, any plant is a good choice!\r\n      Plant.allObjects().forEach(plant => goodIds.add(plant.id));\r\n    } else {\r\n      // Start with all plants in the NEUTRAL set.\r\n      Plant.allObjects().forEach(plant => neutralIds.add(plant.id));\r\n      // Move everything that's GOOD for one of the neighbors into the good set.\r\n      neighborPlants.forEach(plant => {\r\n        plant.goodNeighborIds.forEach(id => {\r\n          neutralIds.delete(id);\r\n          goodIds.add(id);\r\n        });\r\n      });\r\n      // Then move anything that's BAD for neighbor(s) into the bad set.\r\n      // This has to come last, so it can override any 'good' matches.\r\n      neighborPlants.forEach(plant => {\r\n        plant.badNeighborIds.forEach(id => {\r\n          neutralIds.delete(id);\r\n          goodIds.delete(id);\r\n          badIds.add(id);\r\n        });\r\n      });\r\n    }\r\n    \r\n    // And finally, create a group for each non-empty set\r\n    [\r\n    ['good', goodIds],\r\n    ['neutral', neutralIds],\r\n    ['bad', badIds]\r\n    ].forEach(\r\n      ([name, idSet]) => {\r\n        if (idSet.size > 0) {\r\n          groups[name] = Array.from(idSet).map(id => Plant.getObject(id));\r\n        }\r\n      }\r\n      );\r\n    return groups;\r\n  }\r\n}\r\n\r\n  export default Plot;","import '../css/theme.css';\r\nimport '../css/plants.css';\r\nimport React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport Button from 'react-bootstrap/Button';\r\nimport ToggleButtonGroup from 'react-bootstrap/ToggleButtonGroup';\r\nimport ToggleButton from 'react-bootstrap/ToggleButton';\r\nimport Modal from 'react-bootstrap/Modal';\r\nimport ListGroup from 'react-bootstrap/ListGroup';\r\nimport Plot from '../models/Plot';\r\n\r\n\r\nconst propTypes = {\r\n  show: PropTypes.bool.isRequired,\r\n  handleSelect: PropTypes.func.isRequired,\r\n  handleHide: PropTypes.func.isRequired,\r\n  plantGroups: PropTypes.object.isRequired,\r\n  plot: PropTypes.instanceOf(Plot).isRequired,\r\n  neighbors: PropTypes.arrayOf(\r\n    PropTypes.instanceOf(Plot)\r\n  ).isRequired\r\n}\r\n\r\nclass PlantPicker extends React.Component {\r\n\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      currentPlantGroup: Object.keys(props.plantGroups)[0],\r\n    };\r\n  }\r\n\r\n  renderClearPlotButton() {\r\n    if (this.props.plot.plant) {\r\n      return (\r\n        <Button\r\n          block\r\n          variant=\"success\"\r\n          className=\"mb-1\"\r\n          onClick={() => this.props.handleSelect(null, null)}\r\n        >\r\n          <span>Clear plot</span>\r\n        </Button>\r\n      );\r\n    }\r\n  }\r\n\r\n  renderNeighbors() {\r\n    const neighborPlants = this.props.neighbors.map(plot => plot.plant).filter(Boolean);\r\n    if (neighborPlants.length > 0) {\r\n      const getName = (plant) => plant.namePlural.toLowerCase();\r\n      const names = Array.from(new Set(neighborPlants.map(getName))).sort().join(', ');\r\n      return <span className=\"text-wrap text-sm\">Neighbors: {names}</span>;\r\n    }\r\n  }\r\n\r\n  renderFilters() {\r\n    const numGroups = Object.keys(this.props.plantGroups).length;\r\n    if (numGroups > 1) {\r\n      const groupNameMap = {\r\n        all: 'All',\r\n        good: 'Compatible',\r\n        neutral: 'Neutral',\r\n        bad: 'Combative'\r\n      };\r\n      const buttonStyle = {\r\n        width: `${Math.floor(96 / numGroups)}%`\r\n      };\r\n      return (\r\n        <div className=\"mb-2\">\r\n          <ToggleButtonGroup\r\n            type=\"radio\"\r\n            name=\"currentPlantGroupFilter\"\r\n            value={this.state.currentPlantGroup}\r\n            onChange={(value) => { this.setState({ currentPlantGroup: value }) }}\r\n            className=\"bg-light w-100\"\r\n          >\r\n            {Object.entries(this.props.plantGroups).map(([group, plantList]) => {\r\n              return (\r\n                <ToggleButton\r\n                  size=\"sm\"\r\n                  className=\"text-center\"\r\n                  variant=\"outline-success\"\r\n                  value={group}\r\n                  key={group}\r\n                  style={buttonStyle}\r\n                >\r\n                  {groupNameMap[group]}\r\n                </ToggleButton>\r\n              )\r\n            })\r\n            }\r\n          </ToggleButtonGroup>\r\n        </div>\r\n      )\r\n    }\r\n  }\r\n\r\n  renderPlantList() {\r\n    const sortFunc = (a, b) => a.namePlural.localeCompare(b.namePlural);\r\n    const plants = (this.state.currentPlantGroup) ? this.props.plantGroups[this.state.currentPlantGroup] : [];\r\n    return (\r\n      <ListGroup>\r\n        {plants\r\n          .sort(sortFunc)\r\n          .map(plant => {\r\n            return (\r\n              <ListGroup.Item\r\n                action\r\n                key={plant.id}\r\n                onClick={() => this.props.handleSelect(plant, plant.defaultLayout())}\r\n              >\r\n                <span>\r\n                  {plant.namePlural}\r\n                  <div className={`${plant.className} icon float-right`}></div>\r\n                </span>\r\n              </ListGroup.Item>\r\n            )\r\n          })}\r\n      </ListGroup>\r\n    )\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <Modal\r\n        show={this.props.show}\r\n        onHide={this.props.handleHide}\r\n        scrollable\r\n      >\r\n        <Modal.Header closeButton className=\"bg-pastel-green\">\r\n          Plant Picker\r\n        </Modal.Header>\r\n        <Modal.Body>\r\n          {this.renderClearPlotButton()}\r\n          {(this.props.plot.plant) ? <hr /> : null}\r\n          {this.renderNeighbors()}\r\n          {this.renderFilters()}\r\n          {this.renderPlantList()}\r\n        </Modal.Body>\r\n      </Modal>\r\n    );\r\n  }\r\n}\r\n\r\nPlantPicker.propTypes = propTypes;\r\n\r\nexport default PlantPicker;","import '../App.css';\r\nimport '../css/plants.css';\r\nimport '../css/SquareFootPlot.css';\r\nimport React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport Plant from '../models/Plant';\r\nimport Layout from '../models/Layout';\r\n\r\n\r\nconst propTypes = {\r\n  id: PropTypes.string.isRequired,\r\n  plant: PropTypes.instanceOf(Plant),\r\n  layout: PropTypes.instanceOf(Layout),\r\n  onClick: PropTypes.func.isRequired\r\n};\r\n\r\nclass SquareFootPlot extends React.Component {\r\n\r\n  renderPlants() {\r\n    if (this.props.plant) {\r\n      const plantClass = `bg ${this.props.plant.className}`;\r\n      const gridCellStyle = (row, col) => {return {gridArea: `${row + 1} / ${col + 1} / auto / auto`}};\r\n      return (\r\n        this.props.layout.fill.map(([row, col], i) => {\r\n          return (\r\n            <div\r\n              className=\"plant\"\r\n              style={gridCellStyle(row, col)}\r\n              key={i}\r\n            >\r\n              <div className={plantClass}></div>\r\n            </div>\r\n          );\r\n        })\r\n      );\r\n    }\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <button\r\n        className=\"plot\"\r\n        id={this.props.id}\r\n        onClick={this.props.onClick}\r\n      >\r\n        <div\r\n          className=\"plants\"\r\n          style={(this.props.layout) ? this.props.layout.styles : null}\r\n        >\r\n          {this.renderPlants()}\r\n        </div>\r\n      </button>\r\n    );\r\n  }\r\n}\r\n\r\nSquareFootPlot.propTypes = propTypes;\r\n\r\nexport default SquareFootPlot;","import '../App.css';\r\nimport '../css/GardenGrid.css';\r\nimport React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport SquareFootPlot from './SquareFootPlot';\r\nimport Plot from '../models/Plot';\r\n\r\nconst propTypes = {\r\n  grid: PropTypes.arrayOf(\r\n    PropTypes.arrayOf(\r\n      PropTypes.instanceOf(Plot)\r\n    )\r\n  ).isRequired,\r\n  numRows: PropTypes.number.isRequired,\r\n  numCols: PropTypes.number.isRequired,\r\n  handleGridClick: PropTypes.func.isRequired\r\n};\r\n\r\nclass GardenGrid extends React.Component {\r\n\r\n  gridContainerStyles() {\r\n    const sqSizeToShowAllColumns = Math.floor(window.innerWidth * 0.9 / this.props.numCols);\r\n    const sqSizeToShowAllRows = Math.floor(window.innerHeight * 0.7 / this.props.numRows);\r\n    const sqSizeToShowEverything = Math.min(sqSizeToShowAllColumns, sqSizeToShowAllRows);\r\n    // Make sure the square size is no smaller than 60 pixels\r\n    const sqSize = Math.max(sqSizeToShowEverything, 60);\r\n    return {\r\n      width: `${sqSize * this.props.numCols}px`,\r\n      height: `${sqSize * this.props.numRows}px`\r\n    };\r\n  }\r\n\r\n  gridStyles() {\r\n    return {\r\n      gridTemplateRows: `repeat(${this.props.numRows}, 1fr)`,\r\n      gridTemplateColumns: `repeat(${this.props.numCols}, 1fr)`,\r\n    }\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div\r\n        id=\"gridContainer\"\r\n        style={this.gridContainerStyles()}\r\n      >\r\n        <div\r\n          id=\"grid\"\r\n          style={this.gridStyles()}\r\n        >\r\n          {this.props.grid.map((row, rowNum) => {\r\n            return row.map((plot, colNum) => {\r\n              const id = `r${rowNum}c${colNum}`;\r\n              return (\r\n                <SquareFootPlot\r\n                  key={id}\r\n                  id={id}\r\n                  plant={plot.plant}\r\n                  layout={plot.layout}\r\n                  onClick={() => this.props.handleGridClick(rowNum, colNum)}\r\n                />\r\n              );\r\n            })\r\n          })}\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nGardenGrid.propTypes = propTypes;\r\n\r\nexport default GardenGrid;","import '../App.css';\r\nimport '../css/GardenControls.css';\r\nimport React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport ButtonGroup from 'react-bootstrap/ButtonGroup';\r\nimport ButtonToolbar from 'react-bootstrap/ButtonToolbar';\r\nimport Dropdown from 'react-bootstrap/Dropdown';\r\nimport DropdownButton from 'react-bootstrap/DropdownButton';\r\n\r\n\r\nconst dropdownOptionPropTypes = PropTypes.shape({\r\n  label: PropTypes.string.isRequired,\r\n  handleSelect: PropTypes.func.isRequired\r\n});\r\n\r\nconst propTypes = {\r\n  addRowOptions: PropTypes.arrayOf(dropdownOptionPropTypes).isRequired,\r\n  deleteRowOptions: PropTypes.arrayOf(dropdownOptionPropTypes).isRequired,\r\n  addColOptions: PropTypes.arrayOf(dropdownOptionPropTypes).isRequired,\r\n  deleteColOptions: PropTypes.arrayOf(dropdownOptionPropTypes).isRequired\r\n};\r\n\r\nclass GardenControls extends React.Component {\r\n\r\n  btnGroupContainerClass = 'd-flex flex-column m-1 p-0 border border-secondary rounded text-center text-nowrap';\r\n  btnGroupLabelClass = 'badge badge-secondary rounded-0 w-100';\r\n\r\n  renderDropdownButton(id, title, options) {\r\n    return (\r\n      <DropdownButton\r\n        id={id}\r\n        title={title}\r\n        disabled={(options.length > 1) ? false : true}\r\n        variant=\"outline-secondary\"\r\n        size=\"sm\"\r\n      >\r\n        {\r\n          options.map((option, i) => {\r\n            return <Dropdown.Item key={i} onSelect={option.handleSelect}>{option.label}</Dropdown.Item>;\r\n          })\r\n        }\r\n      </DropdownButton>\r\n    );\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <ButtonToolbar aria-label=\"Controls\" className=\"justify-content-center\">\r\n        <div className={this.btnGroupContainerClass}>\r\n          <span className={this.btnGroupLabelClass}>Rows</span>\r\n          <ButtonGroup aria-label=\"Add or delete rows\">\r\n            {this.renderDropdownButton('add-row-btn', 'Add', this.props.addRowOptions)}\r\n            {this.renderDropdownButton('delete-row-btn', 'Delete', this.props.deleteRowOptions)}\r\n          </ButtonGroup>\r\n        </div>\r\n        <div className={this.btnGroupContainerClass}>\r\n          <span className={this.btnGroupLabelClass}>Columns</span>\r\n          <ButtonGroup aria-label=\"Add or delete columns\">\r\n            {this.renderDropdownButton('add-col-btn', 'Add', this.props.addColOptions)}\r\n            {this.renderDropdownButton('delete-col-btn', 'Delete', this.props.deleteColOptions)}\r\n          </ButtonGroup>\r\n        </div>\r\n      </ButtonToolbar>\r\n    );\r\n  }\r\n}\r\n\r\nGardenControls.propTypes = propTypes;\r\n\r\nexport default GardenControls;","import React from 'react';\r\nimport Container from 'react-bootstrap/Container';\r\nimport Card from 'react-bootstrap/Card';\r\nimport PlantPicker from '../components/PlantPicker';\r\nimport GardenGrid from '../components/GardenGrid';\r\nimport GardenControls from '../components/GardenControls';\r\nimport Plant from '../models/Plant';\r\nimport Layout from '../models/Layout';\r\nimport Plot from '../models/Plot';\r\n\r\n\r\n// iteration helpers\r\nconst range = (length) => [...Array(length).keys()];\r\n\r\n// grid helpers\r\nconst createRow = (length) => new Array(length).fill().map(cell => new Plot());\r\nconst createGrid = (numRows, numCols) => Array(numRows).fill().map(row => createRow(numCols));\r\nconst cloneGrid = (grid) => grid.map(row => row.slice());\r\n\r\n\r\nclass Designer extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      numRows: 4,\r\n      numCols: 4,\r\n      grid: createGrid(4, 4),\r\n      showPlantPicker: false,\r\n    };\r\n    this.handleGridClick = this.handleGridClick.bind(this);\r\n    this.addRow = this.addRow.bind(this);\r\n    this.addCol = this.addCol.bind(this);\r\n    this.clickedRow = null;\r\n    this.clickedCol = null;\r\n    this.history = [];\r\n  }\r\n\r\n  componentDidMount() {\r\n    Plant.loadObjectsFromApi();\r\n    Layout.loadObjectsFromApi();\r\n  }\r\n\r\n  handleGridClick(row, col) {\r\n    this.clickedRow = row;\r\n    this.clickedCol = col;\r\n    this.setState({ showPlantPicker: true });\r\n  }\r\n\r\n  addRow(index) {\r\n    const numRows = this.state.numRows + 1;\r\n    const grid = cloneGrid(this.state.grid);\r\n    grid.splice(index, 0, createRow(this.state.numCols));\r\n    this.setState({ numRows: numRows, grid: grid });\r\n  }\r\n\r\n  addRowOptions() {\r\n    const label = (index) => {\r\n      if (index === 0) {\r\n        return 'To top';\r\n      } else if (index === this.state.numRows) {\r\n        return 'To bottom';\r\n      } else {\r\n        return `Insert below ${index}`;\r\n      }\r\n    }\r\n    return (\r\n      range(this.state.numRows + 1).map(index => {\r\n        return {\r\n          label: label(index),\r\n          handleSelect: this.addRow.bind(this, index)\r\n        };\r\n      })\r\n    );\r\n  }\r\n\r\n  deleteRow(index) {\r\n    this.setState((state) => {\r\n      return {\r\n        numRows: state.numRows - 1,\r\n        grid: state.grid.map((row, rowNum) => (rowNum === index) ? null : row.slice()).filter(Boolean),\r\n      }\r\n    });\r\n  }\r\n\r\n  deleteRowOptions() {\r\n    const label = (index) => String(index + 1);\r\n    return (\r\n      range(this.state.numRows).map(index => {\r\n        return {\r\n          label: label(index),\r\n          handleSelect: this.deleteRow.bind(this, index)\r\n        };\r\n      })\r\n    );\r\n  }\r\n\r\n  addCol(index) {\r\n    const numCols = this.state.numCols + 1;\r\n    const grid = cloneGrid(this.state.grid);\r\n    grid.forEach(row => row.splice(index, 0, new Plot()));\r\n    this.setState({ numCols: numCols, grid: grid });\r\n  }\r\n\r\n  addColOptions() {\r\n    const label = (index) => {\r\n      if (index === 0) {\r\n        return 'To left';\r\n      } else if (index === this.state.numCols) {\r\n        return 'To right';\r\n      } else {\r\n        return `Insert right of ${index}`;\r\n      }\r\n    }\r\n    return (\r\n      range(this.state.numCols + 1).map(index => {\r\n        return {\r\n          label: label(index),\r\n          handleSelect: this.addCol.bind(this, index)\r\n        };\r\n      })\r\n    );\r\n  }\r\n\r\n  deleteCol(index) {\r\n    this.setState((state) => {\r\n      return {\r\n        numCols: state.numCols - 1,\r\n        grid: state.grid.map(row => row.map((plot, colNum) => (colNum === index) ? null : plot).filter(Boolean))\r\n      }\r\n    });\r\n  }\r\n\r\n  deleteColOptions() {\r\n    const label = (index) => String(index + 1);\r\n    return (\r\n      range(this.state.numCols).map(index => {\r\n        return {\r\n          label: label(index),\r\n          handleSelect: this.deleteCol.bind(this, index)\r\n        };\r\n      })\r\n    );\r\n  }\r\n\r\n  handlePlantPickerSelection(plant, layout) {\r\n    const grid = cloneGrid(this.state.grid);\r\n    const plot = grid[this.clickedRow][this.clickedCol];\r\n    Object.assign(plot, { plant: plant, layout: layout });\r\n    this.clickedRow = null;\r\n    this.clickedCol = null;\r\n    this.setState({ grid: grid, showPlantPicker: false });\r\n  }\r\n\r\n  renderPlantPicker() {\r\n    if (this.state.showPlantPicker) {\r\n      const row = this.clickedRow;\r\n      const col = this.clickedCol;\r\n      return (\r\n        <PlantPicker\r\n          show={true}\r\n          handleSelect={(plant, layout) => { this.handlePlantPickerSelection(plant, layout) }}\r\n          handleHide={() => { this.setState({ showPlantPicker: false }) }}\r\n          plantGroups={Plot.plantPickerGroups(row, col, this.state.grid)}\r\n          plot={this.state.grid[row][col]}\r\n          neighbors={Plot.neighbors(row, col, this.state.grid)}\r\n        />\r\n      );\r\n    }\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <Container fluid className=\"mt-2 p-1\">\r\n        {this.renderPlantPicker()}\r\n        <Card className=\"h-75\">\r\n          <Card.Header>\r\n            <GardenControls\r\n              addRowOptions={this.addRowOptions()}\r\n              deleteRowOptions={this.deleteRowOptions()}\r\n              addColOptions={this.addColOptions()}\r\n              deleteColOptions={this.deleteColOptions()}\r\n            />\r\n          </Card.Header>\r\n          <Card.Body\r\n            className=\"align-content-center m-2 overflow-auto p-0\"\r\n            style={{ maxHeight: '70vh', overflowY: 'auto' }}\r\n          >\r\n            <GardenGrid\r\n              grid={this.state.grid}\r\n              numRows={this.state.numRows}\r\n              numCols={this.state.numCols}\r\n              handleGridClick={this.handleGridClick}\r\n            />\r\n          </Card.Body>\r\n        </Card>\r\n      </Container>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Designer;\r\n","import React from 'react';\r\nimport Container from 'react-bootstrap/Container';\r\n\r\n\r\nfunction FlatIconCredit({ authorLink, authorTitle, authorLabel }) {\r\n  return (\r\n    <div>\r\n      {'Icons made by '}\r\n      <a href={authorLink} title={authorTitle}>{authorLabel}</a>\r\n      {' from '}\r\n      <a href=\"https://www.flaticon.com/\" title=\"Flaticon\">www.flaticon.com</a>\r\n    </div>\r\n  );\r\n}\r\n\r\nclass About extends React.Component {\r\n  render() {\r\n    return (\r\n      <Container>\r\n        <h1 className=\"mt-5\">\r\n          About Penny's Garden Planner\r\n        </h1>\r\n        <p>\r\n          Placeholder...fill this in later.\r\n        </p>\r\n        <p>Credit...</p>\r\n        <div className=\"d-flex flex-column\">\r\n          <FlatIconCredit\r\n            authorLabel=\"Smashicons\"\r\n            authorTitle=\"Smashicons\"\r\n            authorLink=\"https://www.flaticon.com/authors/smashicons\"\r\n          />\r\n          <FlatIconCredit\r\n            authorLabel=\"Freepik\"\r\n            authorTitle=\"Freepik\"\r\n            authorLink=\"https://www.flaticon.com/authors/freepik\"\r\n          />\r\n          <FlatIconCredit\r\n            authorLabel=\"wanicon\"\r\n            authorTitle=\"wanicon\"\r\n            authorLink=\"https://www.flaticon.com/authors/wanicon\"\r\n          />\r\n          <FlatIconCredit\r\n            authorLabel=\"mynamepong\"\r\n            authorTitle=\"mynamepong\"\r\n            authorLink=\"https://www.flaticon.com/authors/mynamepong\"\r\n          />\r\n        </div>\r\n      </Container>\r\n    );\r\n  }\r\n}\r\n\r\nexport default About;","import React from 'react';\r\nimport Card from 'react-bootstrap/Card';\r\nimport Carousel from 'react-bootstrap/Carousel';\r\nimport '../css/Shrine.css';\r\nimport pennyPic1 from '../images/Penny_1.jpg';\r\nimport pennyPic2 from '../images/Penny_2.jpg';\r\nimport pennyPic3 from '../images/Penny_3.jpg';\r\nimport pennyPic4 from '../images/Penny_4.jpg';\r\nimport pennyPic5 from '../images/Penny_5.jpg';\r\n\r\n\r\nclass Shrine extends React.Component {\r\n\r\n  render() {\r\n    return (\r\n      <Card>\r\n        <Card.Header as=\"h5\">Penny</Card.Header>\r\n        <Card.Body className=\"bg-dark\">\r\n          <Carousel>\r\n            <Carousel.Item><img src={pennyPic3} alt=\"Penny pic #1\" /></Carousel.Item>\r\n            <Carousel.Item><img src={pennyPic4} alt=\"Penny pic #2\" /></Carousel.Item>\r\n            <Carousel.Item><img src={pennyPic1} alt=\"Penny pic #3\" /></Carousel.Item>\r\n            <Carousel.Item><img src={pennyPic2} alt=\"Penny pic #4\" /></Carousel.Item>\r\n            <Carousel.Item><img src={pennyPic5} alt=\"Penny pic #5\" /></Carousel.Item>\r\n          </Carousel>\r\n        </Card.Body>\r\n      </Card>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Shrine;","import React from 'react';\r\nimport Header from './components/Header';\r\nimport Designer from './pages/Designer';\r\nimport About from './pages/About';\r\nimport Shrine from './pages/Shrine';\r\nimport './App.css';\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\n\r\n\r\nclass App extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      currentPageId: 'designer',\r\n    };\r\n    const page = (id, label) => ({id: id, label: label});\r\n    this.pages = [\r\n      page('designer', 'Garden Planner'),\r\n      page('about', 'About'),\r\n      page('shrine', 'The Shrine'),\r\n    ];\r\n    this.handleSelectPage = this.handleSelectPage.bind(this);\r\n  }\r\n\r\n  handleSelectPage(pageId) {\r\n    this.setState((state) => {\r\n      return {\r\n        currentPageId: pageId\r\n      }\r\n    });\r\n  }\r\n\r\n  renderBody() {\r\n    if (this.state.currentPageId === 'designer') {\r\n      return <Designer />;\r\n    } else if (this.state.currentPageId === 'about') {\r\n      return <About />;\r\n    } else if (this.state.currentPageId === 'shrine') {\r\n      return <Shrine />;\r\n    } else {\r\n      return <p>No clue</p>;\r\n    }\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"App\">\r\n        <Header\r\n          pages={this.pages}\r\n          currentPageId={this.state.currentPageId}\r\n          handleSelectPage={this.handleSelectPage}\r\n        />\r\n        {this.renderBody()}\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n","module.exports = __webpack_public_path__ + \"static/media/Penny_1.5831e7f0.jpg\";","module.exports = __webpack_public_path__ + \"static/media/Penny_2.c0360f33.jpg\";","module.exports = __webpack_public_path__ + \"static/media/Penny_3.5e036fdc.jpg\";","module.exports = __webpack_public_path__ + \"static/media/Penny_4.ba0f8021.jpg\";","module.exports = __webpack_public_path__ + \"static/media/Penny_5.825f553d.jpg\";"],"sourceRoot":""}