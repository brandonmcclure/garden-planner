{"version":3,"sources":["components/Header.js","models/Layout.js","models/Plant.js","models/Plot.js","components/PlantPicker.js","components/SquareFootPlot.js","components/GardenGrid.js","components/GardenControls.js","pages/Designer.js","pages/About.js","pages/Shrine.js","pages/Credits.js","App.js","serviceWorker.js","index.js","images/Penny_1.jpg","images/Penny_2.jpg","images/Penny_3.jpg","images/Penny_4.jpg","images/Penny_5.jpg","images/Penny_6.jpg"],"names":["Header","Navbar","collapseOnSelect","expand","className","Brand","href","this","props","defaultPath","Toggle","aria-controls","Collapse","id","Nav","activeKey","location","pathname","navItems","map","item","Item","key","name","Link","path","React","Component","withRouter","layoutObjects","Layout","resource","rows","cols","fill","styles","display","gridTemplateRows","gridTemplateColumns","position","top","left","width","height","find","layout","fetch","then","response","status","json","data","forEach","push","plantObjects","Plant","namePlural","name_plural","scientificName","scientific_name","layoutIds","layouts","goodNeighborIds","good_neighbors","badNeighborIds","bad_neighbors","toLowerCase","replace","imageName","defaultLayout","bind","getObject","plant","Plot","plotRow","plotCol","grid","numRows","length","numCols","neighborPlots","row","col","validLoc","neighborPlants","neighbors","plot","filter","Boolean","groups","goodIds","Set","neutralIds","badIds","allObjects","add","delete","idSet","size","Array","from","PlantPicker","state","currentPlantGroup","Object","keys","plantGroups","block","variant","onClick","handleSelect","names","sort","join","numGroups","groupNameMap","all","good","neutral","bad","buttonStyle","Math","floor","type","value","onChange","setState","entries","group","style","plants","a","b","localeCompare","action","show","onHide","handleHide","scrollable","closeButton","Body","renderClearPlotButton","renderNeighbors","renderFilters","renderPlantList","SquareFootPlot","plantClass","gridCellStyle","gridArea","i","renderPlants","GardenGrid","sqSizeToShowAllColumns","window","innerWidth","sqSizeToShowAllRows","innerHeight","sqSizeToShowEverything","min","sqSize","max","gridContainerStyles","gridStyles","rowNum","colNum","handleGridClick","GardenControls","btnGroupContainerClass","btnGroupLabelClass","title","options","disabled","option","onSelect","label","aria-label","renderDropdownButton","addRowOptions","deleteRowOptions","addColOptions","deleteColOptions","range","createRow","cell","createGrid","cloneGrid","slice","Designer","showPlantPicker","addRow","addCol","clickedRow","clickedCol","history","loadObjectsFromApi","index","splice","String","deleteRow","deleteCol","assign","handlePlantPickerSelection","plantPickerGroups","fluid","renderPlantPicker","maxHeight","overflowY","About","PennyPic","src","alt","Shrine","pennyPic3","pennyPic4","pennyPic1","pennyPic6","pennyPic2","pennyPic5","FlatIconCredit","authorLink","authorTitle","authorLabel","Credits","PageNotFound","App","exact","component","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","module","exports"],"mappings":"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","file":"static/js/main.c6e5a27f.chunk.js","sourcesContent":["import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport { withRouter } from 'react-router-dom';\r\nimport { Navbar, Nav } from 'react-bootstrap';\r\nimport '../css/theme.css';\r\n\r\n\r\nconst propTypes = {\r\n  defaultPath: PropTypes.string.isRequired,\r\n  navItems: PropTypes.arrayOf(\r\n    PropTypes.shape({\r\n      path: PropTypes.string.isRequired,\r\n      name: PropTypes.string.isRequired\r\n    })\r\n  ).isRequired\r\n};\r\n\r\nclass Header extends React.Component {\r\n  render() {\r\n    return (\r\n      <Navbar collapseOnSelect expand=\"md\" className=\"bg-pastel-green\">\r\n        <Navbar.Brand href={this.props.defaultPath}>\r\n          Penny's Garden Planner\r\n        </Navbar.Brand>\r\n        <Navbar.Toggle aria-controls=\"navbar-actions\" />\r\n        <Navbar.Collapse id=\"navbar-actions\">\r\n          <Nav className=\"mr-auto\" activeKey={this.props.location.pathname}>\r\n            {\r\n              this.props.navItems.map(item => {\r\n                return (\r\n                  <Nav.Item key={item.name}>\r\n                    <Nav.Link href={item.path}>{item.name}</Nav.Link>\r\n                  </Nav.Item>\r\n                );\r\n              })\r\n            }\r\n          </Nav>\r\n        </Navbar.Collapse>\r\n      </Navbar>\r\n    );\r\n  }\r\n}\r\n\r\nHeader.propTypes = propTypes;\r\n\r\nexport default withRouter(Header);","const layoutObjects = [];\r\n\r\n\r\nexport default class Layout {\r\n  constructor(resource) {\r\n    this.id = resource.id;\r\n    this.rows = resource.rows;\r\n    this.cols = resource.cols;\r\n    this.fill = resource.fill;\r\n    this.styles = {\r\n        display: 'grid',\r\n        gridTemplateRows: `repeat(${resource.rows}, 1fr)`,\r\n        gridTemplateColumns: `repeat(${resource.cols}, 1fr)`,\r\n        position: 'absolute',\r\n        top: 0,\r\n        left: 0,\r\n        width: '100%',\r\n        height: '100%',\r\n    };\r\n  }\r\n\r\n  static getObject(id) {\r\n    return layoutObjects.find(layout => layout.id === id);\r\n  }\r\n\r\n  static allObjects() {\r\n    return layoutObjects;\r\n  }\r\n\r\n  static loadObjectsFromApi() {\r\n    fetch('/backend/layouts/')\r\n      .then(response => {\r\n        return (response.status === 200) ? response.json() : null;\r\n      })\r\n      .then(data => {\r\n        if (data) {\r\n          data.forEach(resource => layoutObjects.push(new Layout(resource)));\r\n        }\r\n      });\r\n  }\r\n}","import Layout from './Layout';\r\n\r\nconst plantObjects = [];\r\n\r\n\r\nexport default class Plant {\r\n  constructor(resource) {\r\n    this.id = resource.id;\r\n    this.name = resource.name;\r\n    this.namePlural = resource.name_plural;\r\n    this.scientificName = resource.scientific_name;\r\n    this.layoutIds = resource.layouts;\r\n    this.goodNeighborIds = resource.good_neighbors;\r\n    this.badNeighborIds = resource.bad_neighbors;\r\n    this.className = resource.name.toLowerCase().replace(/ /g, '-');\r\n    this.imageName = resource.name.toLowerCase().replace(/ /g, '-');\r\n    this.defaultLayout = this.defaultLayout.bind(this);\r\n  }\r\n\r\n  static getObject(id) {\r\n    return plantObjects.find(plant => plant.id === id);\r\n  }\r\n\r\n  static allObjects() {\r\n    return plantObjects;\r\n  }\r\n\r\n  static loadObjectsFromApi() {\r\n    fetch('/backend/plants/')\r\n      .then(response => {\r\n        return (response.status === 200) ? response.json() : null;\r\n      })\r\n      .then(data => {\r\n        if (data) {\r\n          data.forEach(resource => plantObjects.push(new Plant(resource)));\r\n        }\r\n      });\r\n  }\r\n\r\n  defaultLayout() {\r\n    return Layout.getObject(this.layoutIds[0]);\r\n  }\r\n}","import Plant from './Plant';\r\n\r\n\r\nclass Plot {\r\n  constructor(plant = null, layout = null) {\r\n    this.plant = plant;\r\n    this.layout = layout;\r\n  }\r\n\r\n  static neighbors(plotRow, plotCol, grid) {\r\n    // returns the plots surrounding the specified one\r\n    const numRows = grid.length;\r\n    const numCols = grid[0].length;\r\n    const validLoc = (row, col) => (\r\n      row >= 0 &&\r\n      row < numRows &&\r\n      col >= 0 &&\r\n      col < numCols &&\r\n      `${row}_${col}` !== `${plotRow}_${plotCol}`\r\n      );\r\n    const neighborPlots = [];\r\n    [plotRow - 1, plotRow, plotRow + 1].forEach(row => {\r\n      [plotCol - 1, plotCol, plotCol + 1].forEach(col => {\r\n        if (validLoc(row, col)) {\r\n          neighborPlots.push(grid[row][col]);\r\n        }\r\n      })\r\n    });\r\n    return neighborPlots;\r\n  }\r\n\r\n  static plantPickerGroups(plotRow, plotCol, grid) {\r\n    const neighbors = Plot.neighbors(plotRow, plotCol, grid);\r\n    const neighborPlants = neighbors.map(plot => plot.plant).filter(Boolean);\r\n    const groups = {};\r\n    const [goodIds, neutralIds, badIds] = [new Set(), new Set(), new Set()];\r\n\r\n    if (neighborPlants.length === 0) {\r\n      // If there are no neighbors to consider, any plant is a good choice!\r\n      Plant.allObjects().forEach(plant => goodIds.add(plant.id));\r\n    } else {\r\n      // Start with all plants in the NEUTRAL set.\r\n      Plant.allObjects().forEach(plant => neutralIds.add(plant.id));\r\n      // Move everything that's GOOD for one of the neighbors into the good set.\r\n      neighborPlants.forEach(plant => {\r\n        plant.goodNeighborIds.forEach(id => {\r\n          neutralIds.delete(id);\r\n          goodIds.add(id);\r\n        });\r\n      });\r\n      // Then move anything that's BAD for neighbor(s) into the bad set.\r\n      // This has to come last, so it can override any 'good' matches.\r\n      neighborPlants.forEach(plant => {\r\n        plant.badNeighborIds.forEach(id => {\r\n          neutralIds.delete(id);\r\n          goodIds.delete(id);\r\n          badIds.add(id);\r\n        });\r\n      });\r\n    }\r\n    \r\n    // And finally, create a group for each non-empty set\r\n    [\r\n    ['good', goodIds],\r\n    ['neutral', neutralIds],\r\n    ['bad', badIds]\r\n    ].forEach(\r\n      ([name, idSet]) => {\r\n        if (idSet.size > 0) {\r\n          groups[name] = Array.from(idSet).map(id => Plant.getObject(id));\r\n        }\r\n      }\r\n      );\r\n    return groups;\r\n  }\r\n}\r\n\r\n  export default Plot;","import '../css/theme.css';\r\nimport '../css/plants.css';\r\nimport React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport Button from 'react-bootstrap/Button';\r\nimport ToggleButtonGroup from 'react-bootstrap/ToggleButtonGroup';\r\nimport ToggleButton from 'react-bootstrap/ToggleButton';\r\nimport Modal from 'react-bootstrap/Modal';\r\nimport ListGroup from 'react-bootstrap/ListGroup';\r\nimport Plot from '../models/Plot';\r\n\r\n\r\nconst propTypes = {\r\n  show: PropTypes.bool.isRequired,\r\n  handleSelect: PropTypes.func.isRequired,\r\n  handleHide: PropTypes.func.isRequired,\r\n  plantGroups: PropTypes.object.isRequired,\r\n  plot: PropTypes.instanceOf(Plot).isRequired,\r\n  neighbors: PropTypes.arrayOf(\r\n    PropTypes.instanceOf(Plot)\r\n  ).isRequired\r\n}\r\n\r\nclass PlantPicker extends React.Component {\r\n\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      currentPlantGroup: Object.keys(props.plantGroups)[0],\r\n    };\r\n  }\r\n\r\n  renderClearPlotButton() {\r\n    if (this.props.plot.plant) {\r\n      return (\r\n        <Button\r\n          block\r\n          variant=\"success\"\r\n          className=\"mb-1\"\r\n          onClick={() => this.props.handleSelect(null, null)}\r\n        >\r\n          <span>Clear plot</span>\r\n        </Button>\r\n      );\r\n    }\r\n  }\r\n\r\n  renderNeighbors() {\r\n    const neighborPlants = this.props.neighbors.map(plot => plot.plant).filter(Boolean);\r\n    if (neighborPlants.length > 0) {\r\n      const getName = (plant) => plant.namePlural.toLowerCase();\r\n      const names = Array.from(new Set(neighborPlants.map(getName))).sort().join(', ');\r\n      return <span className=\"text-wrap text-sm\">Neighbors: {names}</span>;\r\n    }\r\n  }\r\n\r\n  renderFilters() {\r\n    const numGroups = Object.keys(this.props.plantGroups).length;\r\n    if (numGroups > 1) {\r\n      const groupNameMap = {\r\n        all: 'All',\r\n        good: 'Compatible',\r\n        neutral: 'Neutral',\r\n        bad: 'Combative'\r\n      };\r\n      const buttonStyle = {\r\n        width: `${Math.floor(96 / numGroups)}%`\r\n      };\r\n      return (\r\n        <div className=\"mb-2\">\r\n          <ToggleButtonGroup\r\n            type=\"radio\"\r\n            name=\"currentPlantGroupFilter\"\r\n            value={this.state.currentPlantGroup}\r\n            onChange={(value) => { this.setState({ currentPlantGroup: value }) }}\r\n            className=\"bg-light w-100\"\r\n          >\r\n            {Object.entries(this.props.plantGroups).map(([group, plantList]) => {\r\n              return (\r\n                <ToggleButton\r\n                  size=\"sm\"\r\n                  className=\"text-center\"\r\n                  variant=\"outline-success\"\r\n                  value={group}\r\n                  key={group}\r\n                  style={buttonStyle}\r\n                >\r\n                  {groupNameMap[group]}\r\n                </ToggleButton>\r\n              )\r\n            })\r\n            }\r\n          </ToggleButtonGroup>\r\n        </div>\r\n      )\r\n    }\r\n  }\r\n\r\n  renderPlantList() {\r\n    const sortFunc = (a, b) => a.namePlural.localeCompare(b.namePlural);\r\n    const plants = (this.state.currentPlantGroup) ? this.props.plantGroups[this.state.currentPlantGroup] : [];\r\n    return (\r\n      <ListGroup>\r\n        {plants\r\n          .sort(sortFunc)\r\n          .map(plant => {\r\n            return (\r\n              <ListGroup.Item\r\n                action\r\n                key={plant.id}\r\n                onClick={() => this.props.handleSelect(plant, plant.defaultLayout())}\r\n              >\r\n                <span>\r\n                  {plant.namePlural}\r\n                  <div className={`${plant.className} icon float-right`}></div>\r\n                </span>\r\n              </ListGroup.Item>\r\n            )\r\n          })}\r\n      </ListGroup>\r\n    )\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <Modal\r\n        show={this.props.show}\r\n        onHide={this.props.handleHide}\r\n        scrollable\r\n      >\r\n        <Modal.Header closeButton className=\"bg-pastel-green\">\r\n          Plant Picker\r\n        </Modal.Header>\r\n        <Modal.Body>\r\n          {this.renderClearPlotButton()}\r\n          {(this.props.plot.plant) ? <hr /> : null}\r\n          {this.renderNeighbors()}\r\n          {this.renderFilters()}\r\n          {this.renderPlantList()}\r\n        </Modal.Body>\r\n      </Modal>\r\n    );\r\n  }\r\n}\r\n\r\nPlantPicker.propTypes = propTypes;\r\n\r\nexport default PlantPicker;","import '../App.css';\r\nimport '../css/plants.css';\r\nimport '../css/SquareFootPlot.css';\r\nimport React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport Plant from '../models/Plant';\r\nimport Layout from '../models/Layout';\r\n\r\n\r\nconst propTypes = {\r\n  id: PropTypes.string.isRequired,\r\n  plant: PropTypes.instanceOf(Plant),\r\n  layout: PropTypes.instanceOf(Layout),\r\n  onClick: PropTypes.func.isRequired\r\n};\r\n\r\nclass SquareFootPlot extends React.Component {\r\n\r\n  renderPlants() {\r\n    if (this.props.plant) {\r\n      const plantClass = `bg ${this.props.plant.className}`;\r\n      const gridCellStyle = (row, col) => {return {gridArea: `${row + 1} / ${col + 1} / auto / auto`}};\r\n      return (\r\n        this.props.layout.fill.map(([row, col], i) => {\r\n          return (\r\n            <div\r\n              className=\"plant\"\r\n              style={gridCellStyle(row, col)}\r\n              key={i}\r\n            >\r\n              <div className={plantClass}></div>\r\n            </div>\r\n          );\r\n        })\r\n      );\r\n    }\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <button\r\n        className=\"plot\"\r\n        id={this.props.id}\r\n        onClick={this.props.onClick}\r\n      >\r\n        <div\r\n          className=\"plants\"\r\n          style={(this.props.layout) ? this.props.layout.styles : null}\r\n        >\r\n          {this.renderPlants()}\r\n        </div>\r\n      </button>\r\n    );\r\n  }\r\n}\r\n\r\nSquareFootPlot.propTypes = propTypes;\r\n\r\nexport default SquareFootPlot;","import '../App.css';\r\nimport '../css/GardenGrid.css';\r\nimport React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport SquareFootPlot from './SquareFootPlot';\r\nimport Plot from '../models/Plot';\r\n\r\nconst propTypes = {\r\n  grid: PropTypes.arrayOf(\r\n    PropTypes.arrayOf(\r\n      PropTypes.instanceOf(Plot)\r\n    )\r\n  ).isRequired,\r\n  numRows: PropTypes.number.isRequired,\r\n  numCols: PropTypes.number.isRequired,\r\n  handleGridClick: PropTypes.func.isRequired\r\n};\r\n\r\nclass GardenGrid extends React.Component {\r\n\r\n  gridContainerStyles() {\r\n    const sqSizeToShowAllColumns = Math.floor(window.innerWidth * 0.9 / this.props.numCols);\r\n    const sqSizeToShowAllRows = Math.floor(window.innerHeight * 0.7 / this.props.numRows);\r\n    const sqSizeToShowEverything = Math.min(sqSizeToShowAllColumns, sqSizeToShowAllRows);\r\n    // Make sure the square size is no smaller than 60 pixels\r\n    const sqSize = Math.max(sqSizeToShowEverything, 60);\r\n    return {\r\n      width: `${sqSize * this.props.numCols}px`,\r\n      height: `${sqSize * this.props.numRows}px`\r\n    };\r\n  }\r\n\r\n  gridStyles() {\r\n    return {\r\n      gridTemplateRows: `repeat(${this.props.numRows}, 1fr)`,\r\n      gridTemplateColumns: `repeat(${this.props.numCols}, 1fr)`,\r\n    }\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div\r\n        id=\"gridContainer\"\r\n        style={this.gridContainerStyles()}\r\n      >\r\n        <div\r\n          id=\"grid\"\r\n          style={this.gridStyles()}\r\n        >\r\n          {this.props.grid.map((row, rowNum) => {\r\n            return row.map((plot, colNum) => {\r\n              const id = `r${rowNum}c${colNum}`;\r\n              return (\r\n                <SquareFootPlot\r\n                  key={id}\r\n                  id={id}\r\n                  plant={plot.plant}\r\n                  layout={plot.layout}\r\n                  onClick={() => this.props.handleGridClick(rowNum, colNum)}\r\n                />\r\n              );\r\n            })\r\n          })}\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nGardenGrid.propTypes = propTypes;\r\n\r\nexport default GardenGrid;","import '../App.css';\r\nimport '../css/GardenControls.css';\r\nimport React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport ButtonGroup from 'react-bootstrap/ButtonGroup';\r\nimport ButtonToolbar from 'react-bootstrap/ButtonToolbar';\r\nimport Dropdown from 'react-bootstrap/Dropdown';\r\nimport DropdownButton from 'react-bootstrap/DropdownButton';\r\n\r\n\r\nconst dropdownOptionPropTypes = PropTypes.shape({\r\n  label: PropTypes.string.isRequired,\r\n  handleSelect: PropTypes.func.isRequired\r\n});\r\n\r\nconst propTypes = {\r\n  addRowOptions: PropTypes.arrayOf(dropdownOptionPropTypes).isRequired,\r\n  deleteRowOptions: PropTypes.arrayOf(dropdownOptionPropTypes).isRequired,\r\n  addColOptions: PropTypes.arrayOf(dropdownOptionPropTypes).isRequired,\r\n  deleteColOptions: PropTypes.arrayOf(dropdownOptionPropTypes).isRequired\r\n};\r\n\r\nclass GardenControls extends React.Component {\r\n\r\n  btnGroupContainerClass = 'd-flex flex-column m-1 p-0 border border-secondary rounded text-center text-nowrap';\r\n  btnGroupLabelClass = 'badge badge-secondary rounded-0 w-100';\r\n\r\n  renderDropdownButton(id, title, options) {\r\n    return (\r\n      <DropdownButton\r\n        id={id}\r\n        title={title}\r\n        disabled={(options.length > 1) ? false : true}\r\n        variant=\"outline-secondary\"\r\n        size=\"sm\"\r\n      >\r\n        {\r\n          options.map((option, i) => {\r\n            return <Dropdown.Item key={i} onSelect={option.handleSelect}>{option.label}</Dropdown.Item>;\r\n          })\r\n        }\r\n      </DropdownButton>\r\n    );\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <ButtonToolbar aria-label=\"Controls\" className=\"justify-content-center\">\r\n        <div className={this.btnGroupContainerClass}>\r\n          <span className={this.btnGroupLabelClass}>Rows</span>\r\n          <ButtonGroup aria-label=\"Add or delete rows\">\r\n            {this.renderDropdownButton('add-row-btn', 'Add', this.props.addRowOptions)}\r\n            {this.renderDropdownButton('delete-row-btn', 'Delete', this.props.deleteRowOptions)}\r\n          </ButtonGroup>\r\n        </div>\r\n        <div className={this.btnGroupContainerClass}>\r\n          <span className={this.btnGroupLabelClass}>Columns</span>\r\n          <ButtonGroup aria-label=\"Add or delete columns\">\r\n            {this.renderDropdownButton('add-col-btn', 'Add', this.props.addColOptions)}\r\n            {this.renderDropdownButton('delete-col-btn', 'Delete', this.props.deleteColOptions)}\r\n          </ButtonGroup>\r\n        </div>\r\n      </ButtonToolbar>\r\n    );\r\n  }\r\n}\r\n\r\nGardenControls.propTypes = propTypes;\r\n\r\nexport default GardenControls;","import React from 'react';\r\nimport Container from 'react-bootstrap/Container';\r\nimport Card from 'react-bootstrap/Card';\r\nimport PlantPicker from '../components/PlantPicker';\r\nimport GardenGrid from '../components/GardenGrid';\r\nimport GardenControls from '../components/GardenControls';\r\nimport Plant from '../models/Plant';\r\nimport Layout from '../models/Layout';\r\nimport Plot from '../models/Plot';\r\n\r\n\r\n// iteration helpers\r\nconst range = (length) => [...Array(length).keys()];\r\n\r\n// grid helpers\r\nconst createRow = (length) => new Array(length).fill().map(cell => new Plot());\r\nconst createGrid = (numRows, numCols) => Array(numRows).fill().map(row => createRow(numCols));\r\nconst cloneGrid = (grid) => grid.map(row => row.slice());\r\n\r\n\r\nclass Designer extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      numRows: 4,\r\n      numCols: 4,\r\n      grid: createGrid(4, 4),\r\n      showPlantPicker: false,\r\n    };\r\n    this.handleGridClick = this.handleGridClick.bind(this);\r\n    this.addRow = this.addRow.bind(this);\r\n    this.addCol = this.addCol.bind(this);\r\n    this.clickedRow = null;\r\n    this.clickedCol = null;\r\n    this.history = [];\r\n  }\r\n\r\n  componentDidMount() {\r\n    Plant.loadObjectsFromApi();\r\n    Layout.loadObjectsFromApi();\r\n  }\r\n\r\n  handleGridClick(row, col) {\r\n    this.clickedRow = row;\r\n    this.clickedCol = col;\r\n    this.setState({ showPlantPicker: true });\r\n  }\r\n\r\n  addRow(index) {\r\n    const numRows = this.state.numRows + 1;\r\n    const grid = cloneGrid(this.state.grid);\r\n    grid.splice(index, 0, createRow(this.state.numCols));\r\n    this.setState({ numRows: numRows, grid: grid });\r\n  }\r\n\r\n  addRowOptions() {\r\n    const label = (index) => {\r\n      if (index === 0) {\r\n        return 'To top';\r\n      } else if (index === this.state.numRows) {\r\n        return 'To bottom';\r\n      } else {\r\n        return `Insert below ${index}`;\r\n      }\r\n    }\r\n    return (\r\n      range(this.state.numRows + 1).map(index => {\r\n        return {\r\n          label: label(index),\r\n          handleSelect: this.addRow.bind(this, index)\r\n        };\r\n      })\r\n    );\r\n  }\r\n\r\n  deleteRow(index) {\r\n    this.setState((state) => {\r\n      return {\r\n        numRows: state.numRows - 1,\r\n        grid: state.grid.map((row, rowNum) => (rowNum === index) ? null : row.slice()).filter(Boolean),\r\n      }\r\n    });\r\n  }\r\n\r\n  deleteRowOptions() {\r\n    const label = (index) => String(index + 1);\r\n    return (\r\n      range(this.state.numRows).map(index => {\r\n        return {\r\n          label: label(index),\r\n          handleSelect: this.deleteRow.bind(this, index)\r\n        };\r\n      })\r\n    );\r\n  }\r\n\r\n  addCol(index) {\r\n    const numCols = this.state.numCols + 1;\r\n    const grid = cloneGrid(this.state.grid);\r\n    grid.forEach(row => row.splice(index, 0, new Plot()));\r\n    this.setState({ numCols: numCols, grid: grid });\r\n  }\r\n\r\n  addColOptions() {\r\n    const label = (index) => {\r\n      if (index === 0) {\r\n        return 'To left';\r\n      } else if (index === this.state.numCols) {\r\n        return 'To right';\r\n      } else {\r\n        return `Insert right of ${index}`;\r\n      }\r\n    }\r\n    return (\r\n      range(this.state.numCols + 1).map(index => {\r\n        return {\r\n          label: label(index),\r\n          handleSelect: this.addCol.bind(this, index)\r\n        };\r\n      })\r\n    );\r\n  }\r\n\r\n  deleteCol(index) {\r\n    this.setState((state) => {\r\n      return {\r\n        numCols: state.numCols - 1,\r\n        grid: state.grid.map(row => row.map((plot, colNum) => (colNum === index) ? null : plot).filter(Boolean))\r\n      }\r\n    });\r\n  }\r\n\r\n  deleteColOptions() {\r\n    const label = (index) => String(index + 1);\r\n    return (\r\n      range(this.state.numCols).map(index => {\r\n        return {\r\n          label: label(index),\r\n          handleSelect: this.deleteCol.bind(this, index)\r\n        };\r\n      })\r\n    );\r\n  }\r\n\r\n  handlePlantPickerSelection(plant, layout) {\r\n    const grid = cloneGrid(this.state.grid);\r\n    const plot = grid[this.clickedRow][this.clickedCol];\r\n    Object.assign(plot, { plant: plant, layout: layout });\r\n    this.clickedRow = null;\r\n    this.clickedCol = null;\r\n    this.setState({ grid: grid, showPlantPicker: false });\r\n  }\r\n\r\n  renderPlantPicker() {\r\n    if (this.state.showPlantPicker) {\r\n      const row = this.clickedRow;\r\n      const col = this.clickedCol;\r\n      return (\r\n        <PlantPicker\r\n          show={true}\r\n          handleSelect={(plant, layout) => { this.handlePlantPickerSelection(plant, layout) }}\r\n          handleHide={() => { this.setState({ showPlantPicker: false }) }}\r\n          plantGroups={Plot.plantPickerGroups(row, col, this.state.grid)}\r\n          plot={this.state.grid[row][col]}\r\n          neighbors={Plot.neighbors(row, col, this.state.grid)}\r\n        />\r\n      );\r\n    }\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <Container fluid className=\"mt-2 p-1\">\r\n        {this.renderPlantPicker()}\r\n        <Card className=\"h-75\">\r\n          <Card.Header>\r\n            <GardenControls\r\n              addRowOptions={this.addRowOptions()}\r\n              deleteRowOptions={this.deleteRowOptions()}\r\n              addColOptions={this.addColOptions()}\r\n              deleteColOptions={this.deleteColOptions()}\r\n            />\r\n          </Card.Header>\r\n          <Card.Body\r\n            className=\"align-content-center m-2 overflow-auto p-0\"\r\n            style={{ maxHeight: '70vh', overflowY: 'auto' }}\r\n          >\r\n            <GardenGrid\r\n              grid={this.state.grid}\r\n              numRows={this.state.numRows}\r\n              numCols={this.state.numCols}\r\n              handleGridClick={this.handleGridClick}\r\n            />\r\n          </Card.Body>\r\n        </Card>\r\n      </Container>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Designer;\r\n","import React from 'react';\r\nimport Container from 'react-bootstrap/Container';\r\nimport Button from 'react-bootstrap/Button';\r\n\r\n\r\nclass About extends React.Component {\r\n\r\n  render() {\r\n    return (\r\n    <div>\r\n      <Container className=\"mt-4\">\r\n        <h4>Design your own garden!</h4>\r\n        <hr className=\"my-4\" />\r\n        <p>\r\n          Square-foot gardening is a fun and effective way to grow your own food.  \r\n          It's highly efficient and requires very little space, making it ideal for people who live in urban environments or who have limited mobility.  \r\n          However, it can be difficult for many people to get past the planning phase.\r\n        </p>\r\n        <p>\r\n          Our interactive garden designer is here to help.\r\n          It handles the hard parts for you, like determining seed/seedling arrangements or picking out companion plants.\r\n        </p>\r\n        <Button variant=\"success\" href=\"/\">Go to Garden Designer</Button>\r\n        <hr className=\"my-4\" />\r\n        <h6>Learn more about square-foot gardening</h6>\r\n        <ul>\r\n          <li><a href=\"https://extension.umaine.edu/publications/2761e/\">University of Maine - Gardening in Small Spaces</a></li>\r\n          <li><a href=\"https://www.ag.ndsu.edu/publications/lawns-gardens-trees/the-facts-of-square-foot-gardening\">North Dakota State University</a></li>\r\n          <li><a href=\"https://hgic.clemson.edu/square-foot-gardening/\">Clemson Home and Garden Information Center</a></li>\r\n        </ul>\r\n      </Container>\r\n    </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default About;","import React from 'react';\r\nimport '../css/Shrine.css';\r\nimport pennyPic1 from '../images/Penny_1.jpg';\r\nimport pennyPic2 from '../images/Penny_2.jpg';\r\nimport pennyPic3 from '../images/Penny_3.jpg';\r\nimport pennyPic4 from '../images/Penny_4.jpg';\r\nimport pennyPic5 from '../images/Penny_5.jpg';\r\nimport pennyPic6 from '../images/Penny_6.jpg';\r\n\r\n\r\nfunction PennyPic({src, alt}) {\r\n  return (\r\n    <div className=\"px-2 pb-2\">\r\n      <img className=\"penny-pic\" src={src} alt={alt} />\r\n    </div>\r\n  );\r\n}\r\n\r\nclass Shrine extends React.Component {\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"d-flex flex-column w-100\">\r\n        <div className=\"shrine-header p-2\">\r\n          <h5>Penny</h5>\r\n          <p className=\"m-0\">The fun little feline it's named after.</p>\r\n        </div>\r\n        <div className=\"d-flex flex-wrap mw-100 justify-content-center pt-2\">\r\n          <PennyPic src={pennyPic3} alt=\"Penny pic #1\" />\r\n          <PennyPic src={pennyPic4} alt=\"Penny pic #2\" />\r\n          <PennyPic src={pennyPic1} alt=\"Penny pic #3\" />\r\n          <PennyPic src={pennyPic6} alt=\"Penny pic #4\" />\r\n          <PennyPic src={pennyPic2} alt=\"Penny pic #5\" />\r\n          <PennyPic src={pennyPic5} alt=\"Penny pic #6\" />\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Shrine;","import React from 'react';\r\nimport Container from 'react-bootstrap/Container';\r\n\r\n\r\nfunction FlatIconCredit({ authorLink, authorTitle, authorLabel }) {\r\n  return (\r\n    <div>\r\n      <a href={authorLink} title={authorTitle}>{authorLabel}</a>\r\n      {' from '}\r\n      <a href=\"https://www.flaticon.com/\" title=\"Flaticon\">www.flaticon.com</a>\r\n    </div>\r\n  );\r\n}\r\n\r\nclass Credits extends React.Component {\r\n  render() {\r\n    return (\r\n      <Container className=\"mt-4 flex-column\">\r\n        <h5>Plant vector icons:</h5>\r\n        <ul>\r\n          <li>\r\n            <FlatIconCredit\r\n              authorLabel=\"Smashicons\"\r\n              authorTitle=\"Smashicons\"\r\n              authorLink=\"https://www.flaticon.com/authors/smashicons\"\r\n            />\r\n          </li>\r\n          <li>\r\n            <FlatIconCredit\r\n              authorLabel=\"Freepik\"\r\n              authorTitle=\"Freepik\"\r\n              authorLink=\"https://www.flaticon.com/authors/freepik\"\r\n            />\r\n          </li>\r\n          <li>\r\n            <FlatIconCredit\r\n              authorLabel=\"wanicon\"\r\n              authorTitle=\"wanicon\"\r\n              authorLink=\"https://www.flaticon.com/authors/wanicon\"\r\n            />\r\n          </li>\r\n          <li>\r\n            <FlatIconCredit\r\n              authorLabel=\"mynamepong\"\r\n              authorTitle=\"mynamepong\"\r\n              authorLink=\"https://www.flaticon.com/authors/mynamepong\"\r\n            />\r\n          </li>\r\n        </ul>\r\n      </Container>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Credits;","import React from 'react';\r\nimport { BrowserRouter, Route, Switch } from 'react-router-dom';\r\nimport Header from './components/Header';\r\nimport Designer from './pages/Designer';\r\nimport About from './pages/About';\r\nimport Shrine from './pages/Shrine';\r\nimport Credits from './pages/Credits';\r\nimport './App.css';\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\n\r\n\r\nfunction PageNotFound() {\r\n  return <p>Page not found.</p>;\r\n}\r\n\r\nclass App extends React.Component {\r\n\r\n  render() {\r\n    return (\r\n      <BrowserRouter>\r\n        <div className=\"app\">\r\n          <Header\r\n            defaultPath={'/'}\r\n            navItems={[\r\n              {\r\n                path: '/',\r\n                name: 'Garden Designer'\r\n              },\r\n              {\r\n                path: '/about',\r\n                name: 'About'\r\n              },\r\n              {\r\n                path: '/shrine',\r\n                name: 'Shrine'\r\n              },\r\n              {\r\n                path: '/credits',\r\n                name: 'Credits'\r\n              }\r\n            ]}\r\n          />\r\n          <Switch>\r\n            <Route exact path=\"/\" component={Designer} />\r\n            <Route path=\"/about\" component={About} />\r\n            <Route path=\"/shrine\" component={Shrine} />\r\n            <Route path=\"/credits\" component={Credits} />\r\n            <Route component={PageNotFound} />\r\n          </Switch>\r\n        </div>\r\n      </BrowserRouter>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n","module.exports = __webpack_public_path__ + \"static/media/Penny_1.5831e7f0.jpg\";","module.exports = __webpack_public_path__ + \"static/media/Penny_2.c0360f33.jpg\";","module.exports = __webpack_public_path__ + \"static/media/Penny_3.5e036fdc.jpg\";","module.exports = __webpack_public_path__ + \"static/media/Penny_4.ba0f8021.jpg\";","module.exports = __webpack_public_path__ + \"static/media/Penny_5.825f553d.jpg\";","module.exports = __webpack_public_path__ + \"static/media/Penny_6.0519969f.jpg\";"],"sourceRoot":""}