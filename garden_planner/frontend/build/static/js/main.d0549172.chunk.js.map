{"version":3,"sources":["images/redo.svg","components/Header.js","models/Layout.js","models/Plant.js","models/Plot.js","components/PlantPicker.js","components/SquareFootPlot.js","components/GardenGrid.js","components/GardenControls.js","pages/Designer.js","pages/About.js","pages/Shrine.js","App.js","serviceWorker.js","index.js","images/undo.svg","images/Penny_1.jpg","images/Penny_2.jpg","images/Penny_3.jpg","images/Penny_4.jpg","images/Penny_5.jpg"],"names":["module","exports","Header","Navbar","collapseOnSelect","expand","className","Brand","as","Nav","Link","onClick","props","handleSelectPage","Toggle","aria-controls","Collapse","id","activeKey","this","currentPageId","onSelect","selectedKey","pages","map","page","eventKey","key","label","React","Component","layoutObjects","Layout","resource","rows","cols","fill","styles","display","gridTemplateRows","gridTemplateColumns","position","top","left","width","height","find","layout","fetch","then","response","status","json","data","forEach","push","plantObjects","Plant","name","namePlural","name_plural","scientificName","scientific_name","layoutIds","layouts","goodNeighborIds","good_neighbors","badNeighborIds","bad_neighbors","toLowerCase","replace","imageName","defaultLayout","bind","getObject","plant","Plot","plantPickerOptionGroups","neighboringPlants","groups","goodIds","Set","neutralIds","badIds","length","allObjects","add","delete","idSet","size","Array","from","PlantPicker","state","currentPlantGroup","Object","keys","plantGroups","plot","block","variant","handleSelect","neighborPlants","neighborNames","sort","join","numGroups","groupNameMap","all","good","neutral","bad","buttonStyle","Math","floor","type","value","onChange","setState","entries","group","style","plants","a","b","localeCompare","Item","action","show","onHide","handleHide","scrollable","closeButton","Body","renderClearPlotButton","renderNeighbors","renderFilters","renderPlantList","SquareFootPlot","gridCellStyle","row","col","gridArea","i","renderPlants","GardenGrid","sqSizeToShowAllColumns","window","innerWidth","numCols","sqSizeToShowAllRows","innerHeight","numRows","sqSizeToShowEverything","min","sqSize","max","gridContainerStyles","gridStyles","grid","rowNum","colNum","handleGridClick","GardenControls","aria-label","renderDropdownButton","addRowOptions","deleteRowOptions","addColOptions","deleteColOptions","title","options","disabled","renderDropdownItems","option","range","Designer","showPlantPicker","addRow","addCol","clickedRow","clickedCol","history","loadObjectsFromApi","src","undoIcon","undo","g","pop","slice","index","newNumRows","newGrid","newRow","splice","filter","Boolean","String","deleteRow","newNumCols","deleteCol","gridCopy","assign","plotRow","plotCol","getPlantAtLoc","validLoc","handlePlantPickerSelection","fluid","renderPlantPicker","maxHeight","overflowY","About","class","Shrine","pennyPic3","pennyPic4","pennyPic1","pennyPic2","pennyPic5","App","pageId","renderBody","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"qLAAAA,EAAOC,QAAU,IAA0B,kC,4KCiC5BC,G,uLA5BH,IAAD,OACP,OACE,kBAACC,EAAA,EAAD,CAAQC,kBAAgB,EAACC,OAAO,KAAKC,UAAU,mBAC7C,kBAACH,EAAA,EAAOI,MAAR,CACEC,GAAIC,IAAIC,KACRC,QAAS,kBAAM,EAAKC,MAAMC,iBAAiB,cAF7C,0BAMA,kBAACV,EAAA,EAAOW,OAAR,CAAeC,gBAAc,mBAC7B,kBAACZ,EAAA,EAAOa,SAAR,CAAiBC,GAAG,kBAClB,kBAACR,EAAA,EAAD,CACEH,UAAU,UACVY,UAAWC,KAAKP,MAAMQ,cACtBC,SAAU,SAAAC,GAAW,OAAI,EAAKV,MAAMC,iBAAiBS,KAGnDH,KAAKP,MAAMW,MAAMC,KAAI,SAAAC,GACnB,OAAO,kBAAChB,EAAA,EAAIC,KAAL,CAAUgB,SAAUD,EAAKR,GAAIU,IAAKF,EAAKR,IAAKQ,EAAKG,iB,GAnBnDC,IAAMC,Y,+ICJrBC,EAAgB,GAGDC,E,WACnB,WAAYC,GAAW,oBACrBd,KAAKF,GAAKgB,EAAShB,GACnBE,KAAKe,KAAOD,EAASC,KACrBf,KAAKgB,KAAOF,EAASE,KACrBhB,KAAKiB,KAAOH,EAASG,KACrBjB,KAAKkB,OAAS,CACVC,QAAS,OACTC,iBAAiB,UAAD,OAAYN,EAASC,KAArB,UAChBM,oBAAoB,UAAD,OAAYP,EAASE,KAArB,UACnBM,SAAU,WACVC,IAAK,EACLC,KAAM,EACNC,MAAO,OACPC,OAAQ,Q,2DAIG5B,GACf,OAAOc,EAAce,MAAK,SAAAC,GAAM,OAAIA,EAAO9B,KAAOA,O,mCAIlD,OAAOc,I,2CAIPiB,MAAM,qBACHC,MAAK,SAAAC,GACJ,OAA4B,MAApBA,EAASC,OAAkBD,EAASE,OAAS,QAEtDH,MAAK,SAAAI,GACAA,GACFA,EAAKC,SAAQ,SAAArB,GAAQ,OAAIF,EAAcwB,KAAK,IAAIvB,EAAOC,c,KClC3DuB,EAAe,GAGAC,E,WACnB,WAAYxB,GAAW,oBACrBd,KAAKF,GAAKgB,EAAShB,GACnBE,KAAKuC,KAAOzB,EAASyB,KACrBvC,KAAKwC,WAAa1B,EAAS2B,YAC3BzC,KAAK0C,eAAiB5B,EAAS6B,gBAC/B3C,KAAK4C,UAAY9B,EAAS+B,QAC1B7C,KAAK8C,gBAAkBhC,EAASiC,eAChC/C,KAAKgD,eAAiBlC,EAASmC,cAC/BjD,KAAKb,UAAY2B,EAASyB,KAAKW,cAAcC,QAAQ,KAAM,KAC3DnD,KAAKoD,UAAYtC,EAASyB,KAAKW,cAAcC,QAAQ,KAAM,KAC3DnD,KAAKqD,cAAgBrD,KAAKqD,cAAcC,KAAKtD,M,4DAwB7C,OAAOa,EAAO0C,UAAUvD,KAAK4C,UAAU,O,iCArBxB9C,GACf,OAAOuC,EAAaV,MAAK,SAAA6B,GAAK,OAAIA,EAAM1D,KAAOA,O,mCAI/C,OAAOuC,I,2CAIPR,MAAM,oBACHC,MAAK,SAAAC,GACJ,OAA4B,MAApBA,EAASC,OAAkBD,EAASE,OAAS,QAEtDH,MAAK,SAAAI,GACAA,GACFA,EAAKC,SAAQ,SAAArB,GAAQ,OAAIuB,EAAaD,KAAK,IAAIE,EAAMxB,c,KCehD2C,E,WA5CX,aAA0C,IAA9BD,EAA6B,uDAArB,KAAM5B,EAAe,uDAAN,KAAM,oBACrC5B,KAAKwD,MAAQA,EACbxD,KAAK4B,OAASA,EACd5B,KAAK0D,wBAA0B1D,KAAK0D,wBAAwBJ,KAAKtD,M,oEAG7C2D,GACpB,IAAMC,EAAS,GACRC,EAAgC,IAAIC,IAA3BC,EAAkC,IAAID,IAA1BE,EAAiC,IAAIF,IAgCjE,OA9BiC,IAA7BH,EAAkBM,OAClB3B,EAAM4B,aAAa/B,SAAQ,SAAAqB,GAAK,OAAIK,EAAQM,IAAIX,EAAM1D,QAGtDwC,EAAM4B,aAAa/B,SAAQ,SAAAqB,GAAK,OAAIO,EAAWI,IAAIX,EAAM1D,OAEzD6D,EAAkBxB,SAAQ,SAAAqB,GACtBA,EAAMV,gBAAgBX,SAAQ,SAAArC,GAC1BiE,EAAWK,OAAOtE,GAClB+D,EAAQM,IAAIrE,SAKpB6D,EAAkBxB,SAAQ,SAAAqB,GACtBA,EAAMR,eAAeb,SAAQ,SAAArC,GACzBiE,EAAWK,OAAOtE,GAClB+D,EAAQO,OAAOtE,GACfkE,EAAOG,IAAIrE,UAKvB,CAAC,CAAC,OAAQ+D,GAAU,CAAC,UAAWE,GAAa,CAAC,MAAOC,IAAS7B,SAC1D,YAAoB,IAAD,mBAAjBI,EAAiB,KAAX8B,EAAW,KACXA,EAAMC,KAAO,IACbV,EAAOrB,GAAQgC,MAAMC,KAAKH,GAAOhE,KAAI,SAAAP,GAAE,OAAIwC,EAAMiB,UAAUzD,UAIhE8D,M,KCuGAa,E,YA1Hb,WAAYhF,GAAQ,IAAD,8BACjB,4CAAMA,KACDiF,MAAQ,CACXC,kBAAmBC,OAAOC,KAAKpF,EAAMqF,aAAa,IAHnC,E,qFAOM,IAAD,OACtB,GAAI9E,KAAKP,MAAMsF,KAAKvB,MAClB,OACE,kBAAC,IAAD,CACEwB,OAAK,EACLC,QAAQ,UACR9F,UAAU,OACVK,QAAS,kBAAM,EAAKC,MAAMyF,aAAa,KAAM,QAE7C,+C,wCAON,GAAIlF,KAAKP,MAAM0F,eAAelB,OAAS,EAAG,CACxC,IAAMmB,EAAgBb,MAAMC,KAAK,IAAIV,IAAI9D,KAAKP,MAAM0F,eAAe9E,KAAI,SAAAmD,GAAK,OAAIA,EAAMhB,WAAWU,mBAAiBmC,OAClH,OACE,0BAAMlG,UAAU,qBAAhB,cAAgDiG,EAAcE,KAAK,U,sCAKxD,IAAD,OACRC,EAAYX,OAAOC,KAAK7E,KAAKP,MAAMqF,aAAab,OACtD,GAAIsB,EAAY,EAAG,CACjB,IAAMC,EAAe,CACnBC,IAAK,MACLC,KAAM,aACNC,QAAS,UACTC,IAAK,aAEDC,EAAc,CAClBpE,MAAM,GAAD,OAAKqE,KAAKC,MAAM,GAAKR,GAArB,MAEP,OACE,yBAAKpG,UAAU,QACb,kBAAC,IAAD,CACE6G,KAAK,QACLzD,KAAK,0BACL0D,MAAOjG,KAAK0E,MAAMC,kBAClBuB,SAAU,SAACD,GAAY,EAAKE,SAAS,CAAExB,kBAAmBsB,KAC1D9G,UAAU,kBAETyF,OAAOwB,QAAQpG,KAAKP,MAAMqF,aAAazE,KAAI,YAAyB,IAAD,mBAAtBgG,EAAsB,UAClE,OACE,kBAAC,IAAD,CACE/B,KAAK,KACLnF,UAAU,cACV8F,QAAQ,kBACRgB,MAAOI,EACP7F,IAAK6F,EACLC,MAAOT,GAENL,EAAaa,Y,wCAWX,IAAD,OAEVE,EAAUvG,KAAK0E,MAAMC,kBAAqB3E,KAAKP,MAAMqF,YAAY9E,KAAK0E,MAAMC,mBAAqB,GACvG,OACE,kBAAC,IAAD,KACG4B,EACElB,MALU,SAACmB,EAAGC,GAAJ,OAAUD,EAAEhE,WAAWkE,cAAcD,EAAEjE,eAMjDnC,KAAI,SAAAmD,GACH,OACE,kBAAC,IAAUmD,KAAX,CACEC,QAAM,EACNpG,IAAKgD,EAAM1D,GACXN,QAAS,kBAAM,EAAKC,MAAMyF,aAAa1B,EAAOA,EAAMH,mBAEpD,8BACGG,EAAMhB,WACP,yBAAKrD,UAAS,UAAKqE,EAAMrE,UAAX,+B,+BAU5B,OACE,kBAAC,IAAD,CACE0H,KAAM7G,KAAKP,MAAMoH,KACjBC,OAAQ9G,KAAKP,MAAMsH,WACnBC,YAAU,GAEV,kBAAC,IAAMjI,OAAP,CAAckI,aAAW,EAAC9H,UAAU,mBAApC,gBAGA,kBAAC,IAAM+H,KAAP,KACGlH,KAAKmH,wBACJnH,KAAKP,MAAMsF,KAAKvB,MAAS,6BAAS,KACnCxD,KAAKoH,kBACLpH,KAAKqH,gBACLrH,KAAKsH,wB,GAnHU5G,IAAMC,WCkCjB4G,G,2MAxCG,IAAD,OACb,GAAIvH,KAAKP,MAAM+D,MAAO,CACpB,IAAMgE,EAAgB,SAACC,EAAKC,GAAS,MAAO,CAACC,SAAS,GAAD,OAAKF,EAAM,EAAX,cAAkBC,EAAM,EAAxB,oBACrD,OACE1H,KAAKP,MAAMmC,OAAOX,KAAKZ,KAAI,WAAauH,GAAO,IAAD,mBAAjBH,EAAiB,KAAZC,EAAY,KAC5C,OACE,yBACEvI,UAAU,QACVmH,MAAOkB,EAAcC,EAAKC,GAC1BlH,IAAKoH,GAEL,yBAAKzI,UAAS,aAAQ,EAAKM,MAAM+D,MAAMrE,oB,+BAUjD,OACE,4BACEA,UAAU,OACVW,GAAIE,KAAKP,MAAMK,GACfN,QAASQ,KAAKP,MAAMD,SAEpB,yBACEL,UAAU,SACVmH,MAAQtG,KAAKP,MAAMmC,OAAU5B,KAAKP,MAAMmC,OAAOV,OAAS,MAEvDlB,KAAK6H,qB,GAjCanH,IAAMC,YCuDpBmH,E,8LAlDX,IAAMC,EAAyBjC,KAAKC,MAA0B,GAApBiC,OAAOC,WAAmBjI,KAAKP,MAAMyI,SACzEC,EAAsBrC,KAAKC,MAA2B,GAArBiC,OAAOI,YAAoBpI,KAAKP,MAAM4I,SACvEC,EAAyBxC,KAAKyC,IAAIR,EAAwBI,GAE1DK,EAAS1C,KAAK2C,IAAIH,EAAwB,IAChD,MAAO,CACL7G,MAAM,GAAD,OAAK+G,EAASxI,KAAKP,MAAMyI,QAAzB,MACLxG,OAAO,GAAD,OAAK8G,EAASxI,KAAKP,MAAM4I,QAAzB,S,mCAKR,MAAO,CACLjH,iBAAiB,UAAD,OAAYpB,KAAKP,MAAM4I,QAAvB,UAChBhH,oBAAoB,UAAD,OAAYrB,KAAKP,MAAMyI,QAAvB,a,+BAIb,IAAD,OACP,OACE,yBACEpI,GAAG,gBACHwG,MAAOtG,KAAK0I,uBAEZ,yBACE5I,GAAG,OACHwG,MAAOtG,KAAK2I,cAEX3I,KAAKP,MAAMmJ,KAAKvI,KAAI,SAACoH,EAAKoB,GACzB,OAAOpB,EAAIpH,KAAI,SAAC0E,EAAM+D,GACpB,IAAMhJ,EAAE,WAAO+I,EAAP,YAAiBC,GACzB,OACE,kBAAC,EAAD,CACEtI,IAAKV,EACLA,GAAIA,EACJ0D,MAAOuB,EAAKvB,MACZ5B,OAAQmD,EAAKnD,OACbpC,QAAS,kBAAM,EAAKC,MAAMsJ,gBAAgBF,EAAQC,kB,GAxC3CpI,IAAMC,W,6ECoDhBqI,E,iLAvBX,OACE,kBAAC,IAAD,CAAeC,aAAW,WAAW9J,UAAU,0BAC7C,yBAAKA,UAAU,sFACb,0BAAMA,UAAU,yCAAhB,QACA,kBAAC,IAAD,CAAa8J,aAAW,sBACrBD,EAAeE,qBAAqB,cAAe,MAAOlJ,KAAKP,MAAM0J,eACrEH,EAAeE,qBAAqB,iBAAkB,SAAUlJ,KAAKP,MAAM2J,oBAGhF,yBAAKjK,UAAU,sFACb,0BAAMA,UAAU,yCAAhB,WACA,kBAAC,IAAD,CAAa8J,aAAW,yBACrBD,EAAeE,qBAAqB,cAAe,MAAOlJ,KAAKP,MAAM4J,eACrEL,EAAeE,qBAAqB,iBAAkB,SAAUlJ,KAAKP,MAAM6J,wB,4CApC1DxJ,EAAIyJ,EAAOC,GACrC,OACE,kBAAC,IAAD,CACE1J,GAAIA,EACJyJ,MAAOA,EACPE,WAAWD,EAAQvF,OAAS,GAC5BgB,QAAQ,oBACRX,KAAK,MAEJ0E,EAAeU,oBAAoBF,M,0CAKfA,GACzB,OACEA,EAAQnJ,KAAI,SAACsJ,EAAQ/B,GACnB,OAAO,kBAAC,IAASjB,KAAV,CAAenG,IAAKoH,EAAG1H,SAAUyJ,EAAOzE,cAAeyE,EAAOlJ,c,GAnBhDC,IAAMC,W,iBCA7BiJ,G,OAAQ,SAAC3F,GAAD,mBAAgBM,MAAMN,GAAQY,UA0O7BgF,E,YAvOb,WAAYpK,GAAQ,IAAD,8BACjB,4CAAMA,KACDiF,MAAQ,CACX2D,QAAS,EACTH,QAAS,EACTU,KAAMrE,MAAM,GAAGtD,OAAOZ,KAAI,SAAAoH,GAAG,OAAI,IAAIlD,MAAM,GAAGtD,OAAOZ,KAAI,SAAAqH,GAAG,OAAI,IAAIjE,QACpEqG,iBAAiB,GAEnB,EAAKC,OAAS,EAAKA,OAAOzG,KAAZ,gBACd,EAAK0G,OAAS,EAAKA,OAAO1G,KAAZ,gBACd,EAAKyF,gBAAkB,EAAKA,gBAAgBzF,KAArB,gBACvB,EAAK2G,WAAa,KAClB,EAAKC,WAAa,KAClB,EAAKC,QAAU,GAbE,E,iFAiBjB7H,EAAM8H,qBACNvJ,EAAOuJ,uB,mCAGK,IAAD,OACX,GAA4B,IAAxBpK,KAAKmK,QAAQlG,OACf,OAAO,kBAAC,IAAD,CAAQgB,QAAQ,oBAAoB9F,UAAU,WAAWsK,UAAQ,GAAC,yBAAKY,IAAKC,OAGnF,OAAO,kBAAC,IAAD,CAAQrF,QAAQ,oBAAoBzF,QAAS,WAAQ,EAAK+K,SAAU,yBAAKF,IAAKC,S,6BAKvF,IAAIE,EAAIxK,KAAKmK,QAAQM,MACrBzK,KAAKmG,UAAS,SAACzB,GACb,MAAO,CACLkE,KAAM4B,Q,oCAMV,OAAOxK,KAAK0E,MAAMkE,KAAKvI,KAAI,SAAAoH,GAAG,OAAIA,EAAIiD,a,sCAGxBjD,EAAKC,GACnB1H,KAAKiK,WAAaxC,EAClBzH,KAAKkK,WAAaxC,EAClB1H,KAAKmG,SAAS,CAAE2D,iBAAiB,M,6BAG5Ba,GACL,IAAMC,EAAa5K,KAAK0E,MAAM2D,QAAU,EAClCwC,EAAU7K,KAAK0E,MAAMkE,KAAKvI,KAAI,SAAAoH,GAAG,OAAIA,EAAIiD,WACzCI,EAASvG,MAAMvE,KAAK0E,MAAMwD,SAASjH,OAAOZ,KAAI,SAAAqH,GAAG,OAAI,IAAIjE,KAC/DoH,EAAQE,OAAOJ,EAAO,EAAGG,GACzB9K,KAAKmG,SAAS,CACZkC,QAASuC,EACThC,KAAMiC,M,sCAIO,IAAD,OACRpK,EAAQ,SAACkK,GACb,OAAc,IAAVA,EACK,SACEA,IAAU,EAAKjG,MAAM2D,QACvB,YAED,gBAAN,OAAuBsC,IAG3B,OACEf,EAAM5J,KAAK0E,MAAM2D,QAAU,GAAGhI,KAAI,SAAAsK,GAChC,MAAO,CACLlK,MAAOA,EAAMkK,GACbzF,aAAc,EAAK6E,OAAOzG,KAAK,EAAMqH,S,gCAMnCA,GACR3K,KAAKmG,UAAS,SAACzB,GACb,MAAO,CACL2D,QAAS3D,EAAM2D,QAAU,EACzBO,KAAMlE,EAAMkE,KAAKvI,KAAI,SAACoH,EAAKoB,GAAN,OAAkBA,IAAW8B,EAAS,KAAOlD,EAAIiD,WAASM,OAAOC,e,yCAKxE,IAAD,OACXxK,EAAQ,SAACkK,GAAD,OAAWO,OAAOP,EAAQ,IACxC,OACEf,EAAM5J,KAAK0E,MAAM2D,SAAShI,KAAI,SAAAsK,GAC5B,MAAO,CACLlK,MAAOA,EAAMkK,GACbzF,aAAc,EAAKiG,UAAU7H,KAAK,EAAMqH,S,6BAMzCA,GACL,IAAMS,EAAapL,KAAK0E,MAAMwD,QAAU,EAClC2C,EAAU7K,KAAK0E,MAAMkE,KAAKvI,KAAI,SAAAoH,GAAG,OAAIA,EAAIiD,WAC/CG,EAAQ1I,SAAQ,SAAAsF,GAAG,OAAIA,EAAIsD,OAAOJ,EAAO,EAAG,IAAIlH,MAChDzD,KAAKmG,SAAS,CACZ+B,QAASkD,EACTxC,KAAMiC,M,sCAIO,IAAD,OACRpK,EAAQ,SAACkK,GACb,OAAc,IAAVA,EACK,UACEA,IAAU,EAAKjG,MAAMwD,QACvB,WAED,mBAAN,OAA0ByC,IAG9B,OACEf,EAAM5J,KAAK0E,MAAMwD,QAAU,GAAG7H,KAAI,SAAAsK,GAChC,MAAO,CACLlK,MAAOA,EAAMkK,GACbzF,aAAc,EAAK8E,OAAO1G,KAAK,EAAMqH,S,gCAMnCA,GACR3K,KAAKmG,UAAS,SAACzB,GACb,MAAO,CACLwD,QAASxD,EAAMwD,QAAU,EACzBU,KAAMlE,EAAMkE,KAAKvI,KAAI,SAAAoH,GAAG,OAAIA,EAAIpH,KAAI,SAAC0E,EAAM+D,GAAP,OAAmBA,IAAW6B,EAAS,KAAO5F,KAAMiG,OAAOC,kB,yCAKjF,IAAD,OACXxK,EAAQ,SAACkK,GAAD,OAAWO,OAAOP,EAAQ,IACxC,OACEf,EAAM5J,KAAK0E,MAAMwD,SAAS7H,KAAI,SAAAsK,GAC5B,MAAO,CACLlK,MAAOA,EAAMkK,GACbzF,aAAc,EAAKmG,UAAU/H,KAAK,EAAMqH,S,iDAMrBnH,EAAO5B,GAChC,IAAM0J,EAAWtL,KAAK0E,MAAMkE,KAAKvI,KAAI,SAAAoH,GAAG,OAAIA,EAAIiD,WAC1C3F,EAAOuG,EAAStL,KAAKiK,YAAYjK,KAAKkK,YAC5CtF,OAAO2G,OAAOxG,EAAM,CAAEvB,MAAOA,EAAO5B,OAAQA,IAC5C5B,KAAKiK,WAAa,KAClBjK,KAAKkK,WAAa,KAClBlK,KAAKmG,SAAS,CACZyC,KAAM0C,EACNxB,iBAAiB,M,0CAIA,IAAD,OAClB,IAAmC,IAA/B9J,KAAK0E,MAAMoF,gBACb,OAAO,KAGP,IAAM0B,EAAUxL,KAAKiK,WACfwB,EAAUzL,KAAKkK,WAQfwB,EAAgB,SAACjE,EAAKC,GAAN,OAAc,EAAKhD,MAAMkE,KAAKnB,GAAKC,GAAKlE,OACxD2B,EAAiB,GACvB,CAACqG,EAAU,EAAGA,EAASA,EAAU,GAAGrJ,SAAQ,SAAAsF,GAC1C,CAACgE,EAAU,EAAGA,EAASA,EAAU,GAAGtJ,SAAQ,SAAAuF,IAV7B,SAACD,EAAKC,GAAN,OACfD,GAAO,GACJA,EAAM,EAAK/C,MAAM2D,SACjBX,GAAO,GACPA,EAAM,EAAKhD,MAAMwD,SACjB,UAAGT,EAAH,YAAUC,KAAV,UAAuB8D,EAAvB,YAAkCC,IAM/BE,CAASlE,EAAKC,IAAQgE,EAAcjE,EAAKC,IAC3CvC,EAAe/C,KAAKsJ,EAAcjE,EAAKC,UAI7C,IAAM5C,EAAc9E,KAAK0E,MAAMkE,KAAK4C,GAASC,GAAS/H,wBAAwByB,GAC9E,OACE,kBAAC,EAAD,CACE0B,MAAM,EACN3B,aAAc,SAAC1B,EAAO5B,GAAa,EAAKgK,2BAA2BpI,EAAO5B,IAC1EmF,WAAY,WAAQ,EAAKZ,SAAS,CAAE2D,iBAAiB,KACrDhF,YAAaA,EACbC,KAAM/E,KAAK0E,MAAMkE,KAAK4C,GAASC,GAC/BtG,eAAgBA,M,+BAOtB,OACE,kBAAC,IAAD,CAAW0G,OAAK,EAAC1M,UAAU,YACxBa,KAAK8L,oBACN,kBAAC,IAAD,CAAM3M,UAAU,QACd,kBAAC,IAAKJ,OAAN,KACE,kBAAC,EAAD,CACEoK,cAAenJ,KAAKmJ,gBACpBC,iBAAkBpJ,KAAKoJ,mBACvBC,cAAerJ,KAAKqJ,gBACpBC,iBAAkBtJ,KAAKsJ,sBAG3B,kBAAC,IAAKpC,KAAN,CACE/H,UAAU,6CACVmH,MAAO,CAAEyF,UAAW,OAAQC,UAAW,SAEvC,kBAAC,EAAD,CACEpD,KAAM5I,KAAK0E,MAAMkE,KACjBP,QAASrI,KAAK0E,MAAM2D,QACpBH,QAASlI,KAAK0E,MAAMwD,QACpBa,gBAAiB/I,KAAK+I,yB,GA/NbrI,IAAMC,WCLdsL,E,iLAbX,OACE,kBAAC,IAAD,KACE,wBAAIC,MAAM,QAAV,gCAGA,qE,GAPYxL,IAAMC,W,iIC2BXwL,G,iLAjBX,OACE,kBAAC,IAAD,KACE,kBAAC,IAAKpN,OAAN,CAAaM,GAAG,MAAhB,SACA,kBAAC,IAAK6H,KAAN,CAAW/H,UAAU,WACnB,kBAAC,KAAD,KACE,kBAAC,KAASwH,KAAV,KAAe,yBAAK0D,IAAK+B,QACzB,kBAAC,KAASzF,KAAV,KAAe,yBAAK0D,IAAKgC,QACzB,kBAAC,KAAS1F,KAAV,KAAe,yBAAK0D,IAAKiC,QACzB,kBAAC,KAAS3F,KAAV,KAAe,yBAAK0D,IAAKkC,QACzB,kBAAC,KAAS5F,KAAV,KAAe,yBAAK0D,IAAKmC,e,GAZhB9L,IAAMC,WC+CZ8L,I,mBAhDb,WAAYhN,GAAQ,IAAD,uBACjB,4CAAMA,KACDiF,MAAQ,CACXzE,cAAe,YAEjB,IAAMK,EAAO,SAACR,EAAIW,GAAL,MAAgB,CAACX,GAAIA,EAAIW,MAAOA,IAL5B,OAMjB,EAAKL,MAAQ,CACXE,EAAK,WAAY,kBACjBA,EAAK,QAAS,SACdA,EAAK,SAAU,eAEjB,EAAKZ,iBAAmB,EAAKA,iBAAiB4D,KAAtB,gBAXP,E,8EAcFoJ,GACf1M,KAAKmG,UAAS,SAACzB,GACb,MAAO,CACLzE,cAAeyM,Q,mCAMnB,MAAiC,aAA7B1M,KAAK0E,MAAMzE,cACN,kBAAC,EAAD,MAC+B,UAA7BD,KAAK0E,MAAMzE,cACb,kBAAC,EAAD,MAC+B,WAA7BD,KAAK0E,MAAMzE,cACb,kBAAC,GAAD,MAEA,wC,+BAKT,OACE,yBAAKd,UAAU,OACb,kBAAC,EAAD,CACEiB,MAAOJ,KAAKI,MACZH,cAAeD,KAAK0E,MAAMzE,cAC1BP,iBAAkBM,KAAKN,mBAExBM,KAAK2M,kB,GA3CIjM,IAAMC,YCGJsK,QACW,cAA7BjD,OAAO4E,SAASC,UAEe,UAA7B7E,OAAO4E,SAASC,UAEhB7E,OAAO4E,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,GAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMvL,MAAK,SAAAwL,GACjCA,EAAaC,iB,wCEnInB1O,EAAOC,QAAU,IAA0B,kC,6DCA3CD,EAAOC,QAAU,IAA0B,qC,mBCA3CD,EAAOC,QAAU,IAA0B,qC,mBCA3CD,EAAOC,QAAU,IAA0B,qC,mBCA3CD,EAAOC,QAAU,IAA0B,qC,mBCA3CD,EAAOC,QAAU,IAA0B,qC","file":"static/js/main.d0549172.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/redo.d2107f44.svg\";","import React from 'react';\r\nimport { Navbar, Nav } from 'react-bootstrap';\r\nimport '../css/theme.css';\r\n\r\nclass Header extends React.Component {\r\n  render() {\r\n    return (\r\n      <Navbar collapseOnSelect expand=\"md\" className=\"bg-pastel-green\">\r\n        <Navbar.Brand\r\n          as={Nav.Link}\r\n          onClick={() => this.props.handleSelectPage('designer')}\r\n        >\r\n          Penny's Garden Planner\r\n        </Navbar.Brand>\r\n        <Navbar.Toggle aria-controls=\"navbar-actions\" />\r\n        <Navbar.Collapse id=\"navbar-actions\">\r\n          <Nav\r\n            className=\"mr-auto\"\r\n            activeKey={this.props.currentPageId}\r\n            onSelect={selectedKey => this.props.handleSelectPage(selectedKey)}\r\n          >\r\n            {\r\n              this.props.pages.map(page => {\r\n                return <Nav.Link eventKey={page.id} key={page.id}>{page.label}</Nav.Link>;\r\n              })\r\n            }\r\n          </Nav>\r\n        </Navbar.Collapse>\r\n      </Navbar>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Header;","const layoutObjects = [];\r\n\r\n\r\nexport default class Layout {\r\n  constructor(resource) {\r\n    this.id = resource.id;\r\n    this.rows = resource.rows;\r\n    this.cols = resource.cols;\r\n    this.fill = resource.fill;\r\n    this.styles = {\r\n        display: 'grid',\r\n        gridTemplateRows: `repeat(${resource.rows}, 1fr)`,\r\n        gridTemplateColumns: `repeat(${resource.cols}, 1fr)`,\r\n        position: 'absolute',\r\n        top: 0,\r\n        left: 0,\r\n        width: '100%',\r\n        height: '100%',\r\n    };\r\n  }\r\n\r\n  static getObject(id) {\r\n    return layoutObjects.find(layout => layout.id === id);\r\n  }\r\n\r\n  static allObjects() {\r\n    return layoutObjects;\r\n  }\r\n\r\n  static loadObjectsFromApi() {\r\n    fetch('/backend/layouts/')\r\n      .then(response => {\r\n        return (response.status === 200) ? response.json() : null;\r\n      })\r\n      .then(data => {\r\n        if (data) {\r\n          data.forEach(resource => layoutObjects.push(new Layout(resource)));\r\n        }\r\n      });\r\n  }\r\n}","import Layout from './Layout';\r\n\r\nconst plantObjects = [];\r\n\r\n\r\nexport default class Plant {\r\n  constructor(resource) {\r\n    this.id = resource.id;\r\n    this.name = resource.name;\r\n    this.namePlural = resource.name_plural;\r\n    this.scientificName = resource.scientific_name;\r\n    this.layoutIds = resource.layouts;\r\n    this.goodNeighborIds = resource.good_neighbors;\r\n    this.badNeighborIds = resource.bad_neighbors;\r\n    this.className = resource.name.toLowerCase().replace(/ /g, '-');\r\n    this.imageName = resource.name.toLowerCase().replace(/ /g, '-');\r\n    this.defaultLayout = this.defaultLayout.bind(this);\r\n  }\r\n\r\n  static getObject(id) {\r\n    return plantObjects.find(plant => plant.id === id);\r\n  }\r\n\r\n  static allObjects() {\r\n    return plantObjects;\r\n  }\r\n\r\n  static loadObjectsFromApi() {\r\n    fetch('/backend/plants/')\r\n      .then(response => {\r\n        return (response.status === 200) ? response.json() : null;\r\n      })\r\n      .then(data => {\r\n        if (data) {\r\n          data.forEach(resource => plantObjects.push(new Plant(resource)));\r\n        }\r\n      });\r\n  }\r\n\r\n  defaultLayout() {\r\n    return Layout.getObject(this.layoutIds[0]);\r\n  }\r\n}","import Plant from './Plant';\r\nimport Layout from './Layout';\r\n\r\n\r\nclass Plot {\r\n    constructor(plant = null, layout = null) {\r\n        this.plant = plant;\r\n        this.layout = layout;\r\n        this.plantPickerOptionGroups = this.plantPickerOptionGroups.bind(this);\r\n    }\r\n\r\n    plantPickerOptionGroups(neighboringPlants) {\r\n        const groups = {};\r\n        const [goodIds, neutralIds, badIds] = [new Set(), new Set(), new Set()];\r\n        // If there are no neighbors to consider, any plant is a good choice!\r\n        if (neighboringPlants.length === 0) {\r\n            Plant.allObjects().forEach(plant => goodIds.add(plant.id));\r\n        } else {\r\n            // Start with all plants in the NEUTRAL set.\r\n            Plant.allObjects().forEach(plant => neutralIds.add(plant.id));\r\n            // Move everything that's GOOD for one of the neighbors into the good set.\r\n            neighboringPlants.forEach(plant => {\r\n                plant.goodNeighborIds.forEach(id => {\r\n                    neutralIds.delete(id);\r\n                    goodIds.add(id);\r\n                });\r\n            });\r\n            // Then move anything that's BAD for neighbor(s) into the bad set.\r\n            // This has to come last, so it can override any 'good' matches.\r\n            neighboringPlants.forEach(plant => {\r\n                plant.badNeighborIds.forEach(id => {\r\n                    neutralIds.delete(id);\r\n                    goodIds.delete(id);\r\n                    badIds.add(id);\r\n                });\r\n            })\r\n        }\r\n        // Convert each set with >0 entries into an array and add it to the plant groups.\r\n        [['good', goodIds], ['neutral', neutralIds], ['bad', badIds]].forEach(\r\n            ([name, idSet]) => {\r\n                if (idSet.size > 0) {\r\n                    groups[name] = Array.from(idSet).map(id => Plant.getObject(id));\r\n                }\r\n            }\r\n        );\r\n        return groups;\r\n    }\r\n}\r\n\r\nexport default Plot;","import '../css/theme.css';\r\nimport '../css/plants.css';\r\nimport React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport Button from 'react-bootstrap/Button';\r\nimport ToggleButtonGroup from 'react-bootstrap/ToggleButtonGroup';\r\nimport ToggleButton from 'react-bootstrap/ToggleButton';\r\nimport Modal from 'react-bootstrap/Modal';\r\nimport ListGroup from 'react-bootstrap/ListGroup';\r\nimport Plot from '../models/Plot';\r\nimport Plant from '../models/Plant';\r\n\r\n\r\nconst propTypes = {\r\n  show: PropTypes.bool.isRequired,\r\n  handleSelect: PropTypes.func.isRequired,\r\n  handleHide: PropTypes.func.isRequired,\r\n  plantGroups: PropTypes.object.isRequired,\r\n  plot: PropTypes.instanceOf(Plot).isRequired,\r\n  neighborPlants: PropTypes.arrayOf(\r\n    PropTypes.instanceOf(Plant)\r\n  ).isRequired\r\n}\r\n\r\nclass PlantPicker extends React.Component {\r\n\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      currentPlantGroup: Object.keys(props.plantGroups)[0],\r\n    };\r\n  }\r\n\r\n  renderClearPlotButton() {\r\n    if (this.props.plot.plant) {\r\n      return (\r\n        <Button\r\n          block\r\n          variant=\"success\"\r\n          className=\"mb-1\"\r\n          onClick={() => this.props.handleSelect(null, null)}\r\n        >\r\n          <span>Clear plot</span>\r\n        </Button>\r\n      );\r\n    }\r\n  }\r\n\r\n  renderNeighbors() {\r\n    if (this.props.neighborPlants.length > 0) {\r\n      const neighborNames = Array.from(new Set(this.props.neighborPlants.map(plant => plant.namePlural.toLowerCase()))).sort();\r\n      return (\r\n        <span className=\"text-wrap text-sm\">Neighbors: {neighborNames.join(', ')}</span>\r\n      );\r\n    }\r\n  }\r\n\r\n  renderFilters() {\r\n    const numGroups = Object.keys(this.props.plantGroups).length;\r\n    if (numGroups > 1) {\r\n      const groupNameMap = {\r\n        all: 'All',\r\n        good: 'Compatible',\r\n        neutral: 'Neutral',\r\n        bad: 'Combative'\r\n      };\r\n      const buttonStyle = {\r\n        width: `${Math.floor(96 / numGroups)}%`\r\n      };\r\n      return (\r\n        <div className=\"mb-2\">\r\n          <ToggleButtonGroup\r\n            type=\"radio\"\r\n            name=\"currentPlantGroupFilter\"\r\n            value={this.state.currentPlantGroup}\r\n            onChange={(value) => { this.setState({ currentPlantGroup: value }) }}\r\n            className=\"bg-light w-100\"\r\n          >\r\n            {Object.entries(this.props.plantGroups).map(([group, plantList]) => {\r\n              return (\r\n                <ToggleButton\r\n                  size=\"sm\"\r\n                  className=\"text-center\"\r\n                  variant=\"outline-success\"\r\n                  value={group}\r\n                  key={group}\r\n                  style={buttonStyle}\r\n                >\r\n                  {groupNameMap[group]}\r\n                </ToggleButton>\r\n              )\r\n            })\r\n            }\r\n          </ToggleButtonGroup>\r\n        </div>\r\n      )\r\n    }\r\n  }\r\n\r\n  renderPlantList() {\r\n    const sortFunc = (a, b) => a.namePlural.localeCompare(b.namePlural);\r\n    const plants = (this.state.currentPlantGroup) ? this.props.plantGroups[this.state.currentPlantGroup] : [];\r\n    return (\r\n      <ListGroup>\r\n        {plants\r\n          .sort(sortFunc)\r\n          .map(plant => {\r\n            return (\r\n              <ListGroup.Item\r\n                action\r\n                key={plant.id}\r\n                onClick={() => this.props.handleSelect(plant, plant.defaultLayout())}\r\n              >\r\n                <span>\r\n                  {plant.namePlural}\r\n                  <div className={`${plant.className} icon float-right`}></div>\r\n                </span>\r\n              </ListGroup.Item>\r\n            )\r\n          })}\r\n      </ListGroup>\r\n    )\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <Modal\r\n        show={this.props.show}\r\n        onHide={this.props.handleHide}\r\n        scrollable\r\n      >\r\n        <Modal.Header closeButton className=\"bg-pastel-green\">\r\n          Plant Picker\r\n        </Modal.Header>\r\n        <Modal.Body>\r\n          {this.renderClearPlotButton()}\r\n          {(this.props.plot.plant) ? <hr /> : null}\r\n          {this.renderNeighbors()}\r\n          {this.renderFilters()}\r\n          {this.renderPlantList()}\r\n        </Modal.Body>\r\n      </Modal>\r\n    );\r\n  }\r\n}\r\n\r\nPlantPicker.propTypes = propTypes;\r\n\r\nexport default PlantPicker;","import '../App.css';\r\nimport '../css/plants.css';\r\nimport '../css/SquareFootPlot.css';\r\nimport React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport Plant from '../models/Plant';\r\nimport Layout from '../models/Layout';\r\n\r\n\r\nconst propTypes = {\r\n  id: PropTypes.string.isRequired,\r\n  plant: PropTypes.instanceOf(Plant),\r\n  layout: PropTypes.instanceOf(Layout),\r\n  onClick: PropTypes.func.isRequired\r\n};\r\n\r\nclass SquareFootPlot extends React.Component {\r\n\r\n  renderPlants() {\r\n    if (this.props.plant) {\r\n      const gridCellStyle = (row, col) => {return {gridArea: `${row + 1} / ${col + 1} / auto / auto`}};\r\n      return (\r\n        this.props.layout.fill.map(([row, col], i) => {\r\n          return (\r\n            <div\r\n              className=\"plant\"\r\n              style={gridCellStyle(row, col)}\r\n              key={i}\r\n            >\r\n              <div className={`bg ${this.props.plant.className}`}>\r\n              </div>\r\n            </div>\r\n          );\r\n        })\r\n      );\r\n    }\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <button\r\n        className=\"plot\"\r\n        id={this.props.id}\r\n        onClick={this.props.onClick}\r\n      >\r\n        <div\r\n          className=\"plants\"\r\n          style={(this.props.layout) ? this.props.layout.styles : null}\r\n        >\r\n          {this.renderPlants()}\r\n        </div>\r\n      </button>\r\n    );\r\n  }\r\n}\r\n\r\nSquareFootPlot.propTypes = propTypes;\r\n\r\nexport default SquareFootPlot;\r\n\r\n\r\n// so my desired layout is:\r\n//   <plot, this is the container of a fixed size, className=\"plot\">\r\n//     <plants styles=layout.styles className=\"plants\">\r\n//       <plant>\r\n//         <bg></bg>\r\n//       </plant>\r\n//       <plant>\r\n//         <bg></bg>\r\n//       </plant>\r\n//       ...\r\n//     </plants>\r\n//   </plot>\r\n\r\n// So we have:\r\n\r\n// The board/container <div>:\r\n//     #board {\r\n//         position: relative;\r\n//         width: 50vw;\r\n//         height: 50vw;\r\n//         min-width: 300px;\r\n//         min-height: 300px;\r\n//         overflow: hidden;\r\n//         border: 12px solid #6D5720;\r\n//         border-radius: 12px;\r\n//     }\r\n\r\n//     The plants grid <div>:\r\n//         #plants {\r\n//             z-index: 30;\r\n//         }\r\n//         #garden, #plants, #soil, #overlay {\r\n//             display: grid;\r\n//             grid-template-columns: 20% 20% 20% 20% 20%;\r\n//             grid-template-rows: 20% 20% 20% 20% 20%;\r\n//             position: absolute;\r\n//             top: 0;\r\n//             left: 0;\r\n//             width: 100%;\r\n//             height: 100%;\r\n//         }\r\n\r\n//         The individual plant <div>s:\r\n//             Each has a style indicating grid location.\r\n//             Format is style=\"grid-area: <row> / <col> / auto / auto;\" (where row & col start at 1, not 0)\r\n//             Each has class \"plant <plantName>\"\r\n//             .plant, .treatment {\r\n//                 position: relative;\r\n//                 width: 100%;\r\n//                 height: 100%;\r\n//                 overflow: hidden;\r\n//             }\r\n\r\n//             The child <div> with class=\"bg\":\r\n//                 It inherits the parent's \"plant <plantName>\" class. \r\n//                 So the class attributes end up being something like:\r\n//                 .plant.carrot .bg {\r\n//                     background-image: url(../images/carrots.svg);\r\n//                 }\r\n//                 .plant .bg, .treatment .bg {\r\n//                     width: 100%;\r\n//                     height: 100%;\r\n//                     background-position: left top;\r\n//                     background-size: calc(10vw - 4px);\r\n//                 }\r\n\r\n//     The soil grid <div>:\r\n//         #soil {\r\n//             background-color: #523D1F;\r\n//             overflow: hidden;\r\n//         }\r\n//         #garden, #plants, #soil, #overlay {\r\n//             display: grid;\r\n//             grid-template-columns: 20% 20% 20% 20% 20%;\r\n//             grid-template-rows: 20% 20% 20% 20% 20%;\r\n//             position: absolute;\r\n//             top: 0;\r\n//             left: 0;\r\n//             width: 100%;\r\n//             height: 100%;\r\n//         }\r\n\r\n//         The plot <div>s:\r\n//             .plot {\r\n//                 width: 100%;\r\n//                 height: 100%;\r\n//                 background-color: #6F532A;\r\n//                 background-color: #836B32;\r\n//                 background-image: url(../images/dirt.svg);\r\n//                 background-size: calc(10vw - 4px);\r\n//             }\r\n\r\n","import '../App.css';\r\nimport '../css/GardenGrid.css';\r\nimport React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport SquareFootPlot from './SquareFootPlot';\r\nimport Plot from '../models/Plot';\r\n\r\nconst propTypes = {\r\n  grid: PropTypes.arrayOf(\r\n    PropTypes.arrayOf(\r\n      PropTypes.instanceOf(Plot)\r\n    )\r\n  ).isRequired,\r\n  numRows: PropTypes.number.isRequired,\r\n  numCols: PropTypes.number.isRequired,\r\n  handleGridClick: PropTypes.func.isRequired\r\n};\r\n\r\nclass GardenGrid extends React.Component {\r\n\r\n  gridContainerStyles() {\r\n    const sqSizeToShowAllColumns = Math.floor(window.innerWidth * 0.9 / this.props.numCols);\r\n    const sqSizeToShowAllRows = Math.floor(window.innerHeight * 0.7 / this.props.numRows);\r\n    const sqSizeToShowEverything = Math.min(sqSizeToShowAllColumns, sqSizeToShowAllRows);\r\n    // Make sure the square size is no smaller than 60 pixels\r\n    const sqSize = Math.max(sqSizeToShowEverything, 60);\r\n    return {\r\n      width: `${sqSize * this.props.numCols}px`,\r\n      height: `${sqSize * this.props.numRows}px`\r\n    };\r\n  }\r\n\r\n  gridStyles() {\r\n    return {\r\n      gridTemplateRows: `repeat(${this.props.numRows}, 1fr)`,\r\n      gridTemplateColumns: `repeat(${this.props.numCols}, 1fr)`,\r\n    }\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div\r\n        id=\"gridContainer\"\r\n        style={this.gridContainerStyles()}\r\n      >\r\n        <div\r\n          id=\"grid\"\r\n          style={this.gridStyles()}\r\n        >\r\n          {this.props.grid.map((row, rowNum) => {\r\n            return row.map((plot, colNum) => {\r\n              const id = `r${rowNum}c${colNum}`;\r\n              return (\r\n                <SquareFootPlot\r\n                  key={id}\r\n                  id={id}\r\n                  plant={plot.plant}\r\n                  layout={plot.layout}\r\n                  onClick={() => this.props.handleGridClick(rowNum, colNum)}\r\n                />\r\n              );\r\n            })\r\n          })}\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nGardenGrid.propTypes = propTypes;\r\n\r\nexport default GardenGrid;","import '../App.css';\r\nimport '../css/GardenControls.css';\r\nimport React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport ButtonGroup from 'react-bootstrap/ButtonGroup';\r\nimport ButtonToolbar from 'react-bootstrap/ButtonToolbar';\r\nimport Dropdown from 'react-bootstrap/Dropdown';\r\nimport DropdownButton from 'react-bootstrap/DropdownButton';\r\n\r\n\r\nconst dropdownOptionPropTypes = PropTypes.shape({\r\n  label: PropTypes.string.isRequired,\r\n  handleSelect: PropTypes.func.isRequired\r\n});\r\n\r\nconst propTypes = {\r\n  addRowOptions: PropTypes.arrayOf(dropdownOptionPropTypes).isRequired,\r\n  deleteRowOptions: PropTypes.arrayOf(dropdownOptionPropTypes).isRequired,\r\n  addColOptions: PropTypes.arrayOf(dropdownOptionPropTypes).isRequired,\r\n  deleteColOptions: PropTypes.arrayOf(dropdownOptionPropTypes).isRequired\r\n};\r\n\r\nclass GardenControls extends React.Component {\r\n\r\n  static renderDropdownButton(id, title, options) {\r\n    return (\r\n      <DropdownButton\r\n        id={id}\r\n        title={title}\r\n        disabled={(options.length > 1) ? false : true}\r\n        variant=\"outline-secondary\"\r\n        size=\"sm\"\r\n      >\r\n        {GardenControls.renderDropdownItems(options)}\r\n      </DropdownButton>\r\n    );\r\n  }\r\n\r\n  static renderDropdownItems(options) {\r\n    return (\r\n      options.map((option, i) => {\r\n        return <Dropdown.Item key={i} onSelect={option.handleSelect}>{option.label}</Dropdown.Item>;\r\n      })\r\n    );\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <ButtonToolbar aria-label=\"Controls\" className=\"justify-content-center\">\r\n        <div className=\"d-flex flex-column m-1 p-0 border border-secondary rounded text-center text-nowrap\">\r\n          <span className=\"badge badge-secondary rounded-0 w-100\">Rows</span>\r\n          <ButtonGroup aria-label=\"Add or delete rows\">\r\n            {GardenControls.renderDropdownButton('add-row-btn', 'Add', this.props.addRowOptions)}\r\n            {GardenControls.renderDropdownButton('delete-row-btn', 'Delete', this.props.deleteRowOptions)}\r\n          </ButtonGroup>\r\n        </div>\r\n        <div className=\"d-flex flex-column m-1 p-0 border border-secondary rounded text-center text-nowrap\">\r\n          <span className=\"badge badge-secondary rounded-0 w-100\">Columns</span>\r\n          <ButtonGroup aria-label=\"Add or delete columns\">\r\n            {GardenControls.renderDropdownButton('add-col-btn', 'Add', this.props.addColOptions)}\r\n            {GardenControls.renderDropdownButton('delete-col-btn', 'Delete', this.props.deleteColOptions)}\r\n          </ButtonGroup>\r\n        </div>\r\n      </ButtonToolbar>\r\n    );\r\n  }\r\n}\r\n\r\nGardenControls.propTypes = propTypes;\r\n\r\nexport default GardenControls;","import React from 'react';\r\nimport Button from 'react-bootstrap/Button';\r\nimport ButtonGroup from 'react-bootstrap/ButtonGroup';\r\nimport ButtonToolbar from 'react-bootstrap/ButtonToolbar';\r\nimport Container from 'react-bootstrap/Container';\r\nimport Row from 'react-bootstrap/Row';\r\nimport Col from 'react-bootstrap/Col';\r\nimport Card from 'react-bootstrap/Card';\r\nimport Modal from 'react-bootstrap/Modal';\r\nimport { Navbar, Nav, Form, FormControl } from 'react-bootstrap';\r\nimport ListGroup from 'react-bootstrap/ListGroup';\r\nimport SplitButton from 'react-bootstrap/SplitButton';\r\nimport PlantPicker from '../components/PlantPicker';\r\nimport GardenGrid from '../components/GardenGrid';\r\nimport GardenControls from '../components/GardenControls';\r\nimport undoIcon from '../images/undo.svg';\r\nimport redoIcon from '../images/redo.svg';\r\nimport Header from '../components/Header.js';\r\nimport Plant from '../models/Plant';\r\nimport Layout from '../models/Layout';\r\nimport Plot from '../models/Plot';\r\n\r\nconst range = (length) => [...Array(length).keys()];\r\n\r\nclass Designer extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      numRows: 4,\r\n      numCols: 4,\r\n      grid: Array(4).fill().map(row => new Array(4).fill().map(col => new Plot())),\r\n      showPlantPicker: false,\r\n    };\r\n    this.addRow = this.addRow.bind(this);\r\n    this.addCol = this.addCol.bind(this);\r\n    this.handleGridClick = this.handleGridClick.bind(this);\r\n    this.clickedRow = null;\r\n    this.clickedCol = null;\r\n    this.history = [];\r\n  }\r\n\r\n  componentDidMount() {\r\n    Plant.loadObjectsFromApi();\r\n    Layout.loadObjectsFromApi();\r\n  }\r\n\r\n  renderUndo() {\r\n    if (this.history.length === 0) {\r\n      return <Button variant=\"outline-secondary\" className=\"disabled\" disabled><img src={undoIcon} /></Button>;\r\n    } else {\r\n      let undoFcn = () => { let g = this.history.pop(); console.log('yaboii', g); this.setState({ grid: g }) };\r\n      return <Button variant=\"outline-secondary\" onClick={() => { this.undo() }}><img src={undoIcon} /></Button>;\r\n    }\r\n  }\r\n\r\n  undo() {\r\n    let g = this.history.pop();\r\n    this.setState((state) => {\r\n      return {\r\n        grid: g,\r\n      }\r\n    });\r\n  }\r\n\r\n  getGridCopy() {\r\n    return this.state.grid.map(row => row.slice());\r\n  }\r\n\r\n  handleGridClick(row, col) {\r\n    this.clickedRow = row;\r\n    this.clickedCol = col;\r\n    this.setState({ showPlantPicker: true });\r\n  }\r\n\r\n  addRow(index) {\r\n    const newNumRows = this.state.numRows + 1;\r\n    const newGrid = this.state.grid.map(row => row.slice());\r\n    const newRow = Array(this.state.numCols).fill().map(col => new Plot());\r\n    newGrid.splice(index, 0, newRow);\r\n    this.setState({\r\n      numRows: newNumRows,\r\n      grid: newGrid,\r\n    });\r\n  }\r\n\r\n  addRowOptions() {\r\n    const label = (index) => {\r\n      if (index === 0) {\r\n        return 'To top';\r\n      } else if (index === this.state.numRows) {\r\n        return 'To bottom';\r\n      } else {\r\n        return `Insert below ${index}`;\r\n      }\r\n    }\r\n    return (\r\n      range(this.state.numRows + 1).map(index => {\r\n        return {\r\n          label: label(index),\r\n          handleSelect: this.addRow.bind(this, index)\r\n        };\r\n      })\r\n    );\r\n  }\r\n\r\n  deleteRow(index) {\r\n    this.setState((state) => {\r\n      return {\r\n        numRows: state.numRows - 1,\r\n        grid: state.grid.map((row, rowNum) => (rowNum === index) ? null : row.slice()).filter(Boolean),\r\n      }\r\n    });\r\n  }\r\n\r\n  deleteRowOptions() {\r\n    const label = (index) => String(index + 1);\r\n    return (\r\n      range(this.state.numRows).map(index => {\r\n        return {\r\n          label: label(index),\r\n          handleSelect: this.deleteRow.bind(this, index)\r\n        };\r\n      })\r\n    );\r\n  }\r\n\r\n  addCol(index) {\r\n    const newNumCols = this.state.numCols + 1;\r\n    const newGrid = this.state.grid.map(row => row.slice());\r\n    newGrid.forEach(row => row.splice(index, 0, new Plot()));\r\n    this.setState({\r\n      numCols: newNumCols,\r\n      grid: newGrid,\r\n    });\r\n  }\r\n\r\n  addColOptions() {\r\n    const label = (index) => {\r\n      if (index === 0) {\r\n        return 'To left';\r\n      } else if (index === this.state.numCols) {\r\n        return 'To right';\r\n      } else {\r\n        return `Insert right of ${index}`;\r\n      }\r\n    }\r\n    return (\r\n      range(this.state.numCols + 1).map(index => {\r\n        return {\r\n          label: label(index),\r\n          handleSelect: this.addCol.bind(this, index)\r\n        };\r\n      })\r\n    );\r\n  }\r\n\r\n  deleteCol(index) {\r\n    this.setState((state) => {\r\n      return {\r\n        numCols: state.numCols - 1,\r\n        grid: state.grid.map(row => row.map((plot, colNum) => (colNum === index) ? null : plot).filter(Boolean))\r\n      }\r\n    });\r\n  }\r\n\r\n  deleteColOptions() {\r\n    const label = (index) => String(index + 1);\r\n    return (\r\n      range(this.state.numCols).map(index => {\r\n        return {\r\n          label: label(index),\r\n          handleSelect: this.deleteCol.bind(this, index)\r\n        };\r\n      })\r\n    );\r\n  }\r\n\r\n  handlePlantPickerSelection(plant, layout) {\r\n    const gridCopy = this.state.grid.map(row => row.slice());\r\n    const plot = gridCopy[this.clickedRow][this.clickedCol];\r\n    Object.assign(plot, { plant: plant, layout: layout });\r\n    this.clickedRow = null;\r\n    this.clickedCol = null;\r\n    this.setState({\r\n      grid: gridCopy,\r\n      showPlantPicker: false,\r\n    });\r\n  }\r\n\r\n  renderPlantPicker() {\r\n    if (this.state.showPlantPicker === false) {\r\n      return null;\r\n    } else {\r\n      // Determine what plants are adjacent to the selected plot...this influences the search results.\r\n      const plotRow = this.clickedRow;\r\n      const plotCol = this.clickedCol;\r\n      const validLoc = (row, col) => (\r\n        row >= 0\r\n        && row < this.state.numRows\r\n        && col >= 0\r\n        && col < this.state.numCols\r\n        && `${row}_${col}` !== `${plotRow}_${plotCol}`\r\n      );\r\n      const getPlantAtLoc = (row, col) => this.state.grid[row][col].plant;\r\n      const neighborPlants = [];\r\n      [plotRow - 1, plotRow, plotRow + 1].forEach(row => {\r\n        [plotCol - 1, plotCol, plotCol + 1].forEach(col => {\r\n          if (validLoc(row, col) && getPlantAtLoc(row, col)) {\r\n            neighborPlants.push(getPlantAtLoc(row, col));\r\n          }\r\n        });\r\n      });\r\n      const plantGroups = this.state.grid[plotRow][plotCol].plantPickerOptionGroups(neighborPlants);\r\n      return (\r\n        <PlantPicker\r\n          show={true}\r\n          handleSelect={(plant, layout) => { this.handlePlantPickerSelection(plant, layout) }}\r\n          handleHide={() => { this.setState({ showPlantPicker: false }) }}\r\n          plantGroups={plantGroups}\r\n          plot={this.state.grid[plotRow][plotCol]}\r\n          neighborPlants={neighborPlants}\r\n        />\r\n      );\r\n    }\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <Container fluid className=\"mt-2 p-1\">\r\n        {this.renderPlantPicker()}\r\n        <Card className=\"h-75\">\r\n          <Card.Header>\r\n            <GardenControls\r\n              addRowOptions={this.addRowOptions()}\r\n              deleteRowOptions={this.deleteRowOptions()}\r\n              addColOptions={this.addColOptions()}\r\n              deleteColOptions={this.deleteColOptions()}\r\n            />\r\n          </Card.Header>\r\n          <Card.Body\r\n            className=\"align-content-center m-2 overflow-auto p-0\"\r\n            style={{ maxHeight: '70vh', overflowY: 'auto' }}\r\n          >\r\n            <GardenGrid\r\n              grid={this.state.grid}\r\n              numRows={this.state.numRows}\r\n              numCols={this.state.numCols}\r\n              handleGridClick={this.handleGridClick}\r\n            />\r\n          </Card.Body>\r\n        </Card>\r\n      </Container>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Designer;\r\n","import React from 'react';\r\nimport Container from 'react-bootstrap/Container';\r\n\r\n\r\nclass About extends React.Component {\r\n  render() {\r\n    return (\r\n      <Container>\r\n        <h1 class=\"mt-5\">\r\n          About Penny's Garden Planner\r\n        </h1>\r\n        <p>\r\n          Placeholder...fill this in later.\r\n        </p>\r\n      </Container>\r\n    );\r\n  }\r\n}\r\n\r\nexport default About;","import React from 'react';\r\nimport Card from 'react-bootstrap/Card';\r\nimport Carousel from 'react-bootstrap/Carousel';\r\nimport '../css/Shrine.css';\r\nimport pennyPic1 from '../images/Penny_1.jpg';\r\nimport pennyPic2 from '../images/Penny_2.jpg';\r\nimport pennyPic3 from '../images/Penny_3.jpg';\r\nimport pennyPic4 from '../images/Penny_4.jpg';\r\nimport pennyPic5 from '../images/Penny_5.jpg';\r\n\r\n\r\nclass Shrine extends React.Component {\r\n\r\n  render() {\r\n    return (\r\n      <Card>\r\n        <Card.Header as=\"h5\">Penny</Card.Header>\r\n        <Card.Body className=\"bg-dark\">\r\n          <Carousel>\r\n            <Carousel.Item><img src={pennyPic3} /></Carousel.Item>\r\n            <Carousel.Item><img src={pennyPic4} /></Carousel.Item>\r\n            <Carousel.Item><img src={pennyPic1} /></Carousel.Item>\r\n            <Carousel.Item><img src={pennyPic2} /></Carousel.Item>\r\n            <Carousel.Item><img src={pennyPic5} /></Carousel.Item>\r\n          </Carousel>\r\n        </Card.Body>\r\n      </Card>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Shrine;","import React from 'react';\nimport Header from './components/Header';\nimport Designer from './pages/Designer';\nimport About from './pages/About';\nimport Shrine from './pages/Shrine';\nimport './App.css';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      currentPageId: 'designer',\n    };\n    const page = (id, label) => ({id: id, label: label});\n    this.pages = [\n      page('designer', 'Garden Planner'),\n      page('about', 'About'),\n      page('shrine', 'The Shrine'),\n    ];\n    this.handleSelectPage = this.handleSelectPage.bind(this);\n  }\n\n  handleSelectPage(pageId) {\n    this.setState((state) => {\n      return {\n        currentPageId: pageId\n      }\n    });\n  }\n\n  renderBody() {\n    if (this.state.currentPageId === 'designer') {\n      return <Designer />;\n    } else if (this.state.currentPageId === 'about') {\n      return <About />;\n    } else if (this.state.currentPageId === 'shrine') {\n      return <Shrine />;\n    } else {\n      return <p>No clue</p>;\n    }\n  }\n\n  render() {\n    return (\n      <div className=\"App\">\n        <Header\n          pages={this.pages}\n          currentPageId={this.state.currentPageId}\n          handleSelectPage={this.handleSelectPage}\n        />\n        {this.renderBody()}\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n","module.exports = __webpack_public_path__ + \"static/media/undo.42f85826.svg\";","module.exports = __webpack_public_path__ + \"static/media/Penny_1.5831e7f0.jpg\";","module.exports = __webpack_public_path__ + \"static/media/Penny_2.c0360f33.jpg\";","module.exports = __webpack_public_path__ + \"static/media/Penny_3.5e036fdc.jpg\";","module.exports = __webpack_public_path__ + \"static/media/Penny_4.ba0f8021.jpg\";","module.exports = __webpack_public_path__ + \"static/media/Penny_5.825f553d.jpg\";"],"sourceRoot":""}