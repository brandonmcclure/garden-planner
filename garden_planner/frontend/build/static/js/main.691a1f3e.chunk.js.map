{"version":3,"sources":["images/redo.svg","components/Header.js","App.js","serviceWorker.js","models/Layout.js","models/Plant.js","components/PlantPicker.js","images/plantImages.js","components/SquareFootPlot.js","models/Plot.js","index.js","images/undo.svg","images/beet.svg","images/carrot.svg","images/garlic.svg","images/leek.svg","images/lettuce.svg","images/onion.svg","images/peas.svg","images/radish.svg","images/spinach.svg","images/strawberry.svg","images/tomato.svg","logo.svg"],"names":["module","exports","Header","Navbar","expand","className","Brand","href","Toggle","aria-controls","Collapse","id","Nav","activeKey","Link","React","Component","App","Boolean","window","location","hostname","match","layoutObjects","Layout","resource","this","rows","cols","fill","styles","display","gridTemplateRows","gridTemplateColumns","position","top","left","width","height","points","row","col","push","allPoints","filled","map","JSON","stringify","cellFilledStates","p","includes","find","layout","fetch","then","response","status","json","data","forEach","plantObjects","Plant","name","namePlural","name_plural","scientificName","scientific_name","layoutIds","layouts","goodNeighborIds","good_neighbors","badNeighborIds","bad_neighbors","toLowerCase","replace","imageName","defaultLayout","bind","getObject","plant","PlantPicker","props","state","currentPlantGroup","Object","keys","plantGroups","plants","sort","a","b","localeCompare","Item","action","key","onClick","handleSelect","length","groupNameMap","all","good","neutral","bad","type","value","onChange","setState","entries","group","size","variant","show","onHide","handleHide","scrollable","closeButton","Body","renderFilters","renderPlantList","beet","carrot","garlic","leek","lettuce","onion","peas","radish","spinach","strawberry","tomato","plantImgSrc","SquareFootPlot","gridCellStyle","gridArea","i","style","renderPlants","Plot","plantPickerOptionGroups","neighboringPlants","groups","goodIds","Set","neutralIds","badIds","allObjects","add","delete","idSet","Array","from","View","numRows","numCols","grid","showPlantPicker","addRow","handleGridClick","clickedRow","clickedCol","history","loadObjectsFromApi","disabled","src","undoIcon","undo","g","pop","aria-label","addCol","gridContainerDynamicStyles","gridDynamicStyles","gridSquares","squares","renderSquare","unit","squareSize","console","log","innerHeight","innerWidth","Math","floor","max","plot","slice","concat","rowNum","splice","gridCopy","assign","plotRow","plotCol","getPlantAtLoc","neighborPlants","validLoc","handlePlantPickerSelection","fluid","renderPlantPicker","renderHeader","maxHeight","overflowY","renderBody","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.691a1f3e.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/redo.d2107f44.svg\";","import React from 'react';\r\nimport { Navbar, Nav, Form, FormControl, Button } from 'react-bootstrap';\r\nimport '../App.css';\r\n\r\nclass Header extends React.Component {\r\n  render() {\r\n    return (\r\n      <Navbar expand=\"md\" className=\"bg-pastel-green\">\r\n        <Navbar.Brand href=\"#home\">Penny's Garden Planner</Navbar.Brand>\r\n        <Navbar.Toggle aria-controls=\"navbar-actions\" />\r\n        <Navbar.Collapse id=\"navbar-actions\">\r\n          <Nav className=\"mr-auto\" activeKey={\"#home\"}>\r\n            <Nav.Link href=\"#home\">Designer</Nav.Link>\r\n            <Nav.Link href=\"#features\">About</Nav.Link>\r\n            <Nav.Link href=\"#pricing\">Contact</Nav.Link>\r\n          </Nav>\r\n        </Navbar.Collapse>\r\n      </Navbar>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Header;","import React from 'react';\r\nimport logo from './logo.svg';\r\nimport Header from './components/Header.js';\r\nimport View from './index.js';\r\nimport ListGroup from 'react-bootstrap/ListGroup';\r\nimport './App.css';\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\n\r\n\r\n\r\n// class Thingy extends React.Component {\r\n\r\n//     state = {\r\n//         data: '',\r\n//         loaded: false,\r\n//         placeholder: \"Loading...\"\r\n//     };\r\n\r\n//     componentDidMount() {\r\n//         fetch('/backend/plants/')\r\n//             .then(response => {\r\n//                 if (response.status !== 200) {\r\n//                     return this.setState({ placeholder: \"Something went wrong\" });\r\n//                 } else {\r\n//                     return response.json();\r\n//                 }\r\n//             })\r\n//             .then(data => this.setState({ data: data, loaded: true }));\r\n//     }\r\n\r\n//     renderOne(plant) {\r\n//       return (\r\n//         <ListGroup.Item\r\n//           key={plant.id}\r\n//         >\r\n//         {plant.name}\r\n//         </ListGroup.Item>\r\n//       );\r\n//     }\r\n\r\n//     render() {\r\n//         const { data, loaded, placeholder } = this.state;\r\n//         if (!loaded) {\r\n//           return <p>{placeholder}</p>;\r\n//         } else {\r\n//           return (\r\n//             <ListGroup>\r\n//               {this.state.data.map(plant => this.renderOne(plant))}\r\n//             </ListGroup>\r\n//           );\r\n//         }\r\n//     }\r\n// }\r\n\r\n\r\n// function App() {\r\n//   return (\r\n//     <div className=\"App\">\r\n//       <View />\r\n//     </div>\r\n//   );\r\n// }\r\n\r\nfunction App() {\r\n  return (\r\n    <div>\r\n      <Header />\r\n      <View />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","const layoutObjects = [];\r\n\r\n\r\nexport default class Layout {\r\n  constructor(resource) {\r\n    this.id = resource.id;\r\n    this.rows = resource.rows;\r\n    this.cols = resource.cols;\r\n    this.fill = resource.fill;\r\n    this.styles = {\r\n        display: 'grid',\r\n        gridTemplateRows: `repeat(${resource.rows}, 1fr)`,\r\n        gridTemplateColumns: `repeat(${resource.cols}, 1fr)`,\r\n        position: 'absolute',\r\n        top: 0,\r\n        left: 0,\r\n        width: '100%',\r\n        height: '100%',\r\n    };\r\n    // create an ordered list of [row, col] pairs for all the points in this layout.\r\n    let points = [];\r\n    for (let row = 0 ; row < resource.rows ; row++ ) {\r\n      for (let col = 0 ; col < resource.cols ; col++ ) {\r\n        points.push([row, col]);\r\n      }\r\n    }\r\n    this.allPoints = points;\r\n    // create a row-major ordered list of booleans indicating which points are filled\r\n    const filled = resource.fill.map(JSON.stringify);\r\n    this.cellFilledStates = points.map(p => (filled.includes(JSON.stringify(p))) ? true : false);\r\n  }\r\n\r\n  static getObject(id) {\r\n    return layoutObjects.find(layout => layout.id == id);\r\n  }\r\n\r\n  static allObjects() {\r\n    return layoutObjects;\r\n  }\r\n\r\n  static loadObjectsFromApi() {\r\n    fetch('/backend/layouts/')\r\n      .then(response => {\r\n        return (response.status === 200) ? response.json() : null;\r\n      })\r\n      .then(data => {\r\n        if (data) {\r\n          data.forEach(resource => layoutObjects.push(new Layout(resource)));\r\n        }\r\n      });\r\n  }\r\n}","import Layout from './Layout';\r\n\r\nconst plantObjects = [];\r\n\r\n\r\nexport default class Plant {\r\n  constructor(resource) {\r\n    this.id = resource.id;\r\n    this.name = resource.name;\r\n    this.namePlural = resource.name_plural;\r\n    this.scientificName = resource.scientific_name;\r\n    this.layoutIds = resource.layouts;\r\n    this.goodNeighborIds = resource.good_neighbors;\r\n    this.badNeighborIds = resource.bad_neighbors;\r\n    this.className = resource.name.toLowerCase().replace(/ /g, '-');\r\n    this.imageName = resource.name.toLowerCase().replace(/ /g, '-');\r\n    this.defaultLayout = this.defaultLayout.bind(this);\r\n  }\r\n\r\n  static getObject(id) {\r\n    return plantObjects.find(plant => plant.id == id);\r\n  }\r\n\r\n  static allObjects() {\r\n    return plantObjects;\r\n  }\r\n\r\n  static loadObjectsFromApi() {\r\n    fetch('/backend/plants/')\r\n      .then(response => {\r\n        return (response.status === 200) ? response.json() : null;\r\n      })\r\n      .then(data => {\r\n        if (data) {\r\n          data.forEach(resource => plantObjects.push(new Plant(resource)));\r\n        }\r\n      });\r\n  }\r\n\r\n  defaultLayout() {\r\n    return Layout.getObject(this.layoutIds[0]);\r\n  }\r\n}","import '../App.css';\r\nimport React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport Button from 'react-bootstrap/Button';\r\nimport ToggleButtonGroup from 'react-bootstrap/ToggleButtonGroup';\r\nimport ToggleButton from 'react-bootstrap/ToggleButton';\r\nimport Modal from 'react-bootstrap/Modal';\r\nimport ListGroup from 'react-bootstrap/ListGroup';\r\nimport Tabs from 'react-bootstrap/Tabs';\r\nimport Tab from 'react-bootstrap/Tab';\r\nimport Plant from '../models/Plant';\r\nimport Layout from '../models/Layout';\r\n\r\n\r\nconst propTypes = {\r\n  show: PropTypes.bool.isRequired,\r\n  handleSelect: PropTypes.func.isRequired,\r\n  handleHide: PropTypes.func.isRequired,\r\n  plantGroups: PropTypes.object.isRequired,\r\n  neighborPlants: PropTypes.arrayOf(\r\n    PropTypes.instanceOf(Plant)\r\n  ).isRequired\r\n}\r\n\r\nclass PlantPicker extends React.Component {\r\n\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      currentPlantGroup: Object.keys(props.plantGroups)[0],\r\n    };\r\n  }\r\n\r\n  renderPlantList() {\r\n    const sortFunc = (a, b) => a.namePlural.localeCompare(b.namePlural);\r\n    const plants = (this.state.currentPlantGroup) ? this.props.plantGroups[this.state.currentPlantGroup] : [];\r\n    return (\r\n      <ListGroup>\r\n        {plants\r\n          .sort(sortFunc)\r\n          .map(plant => {\r\n            return (\r\n              <ListGroup.Item\r\n                action\r\n                key={plant.id}\r\n                onClick={() => this.props.handleSelect(plant, plant.defaultLayout())}\r\n              >\r\n                <div className={`${plant.className} bg-icon-right`}>{plant.namePlural}</div>\r\n              </ListGroup.Item>\r\n            )\r\n          })}\r\n      </ListGroup>\r\n    )\r\n  }\r\n\r\n  renderFilters() {\r\n    if (Object.keys(this.props.plantGroups).length === 1) {\r\n      return null;\r\n    } else {\r\n      const groupNameMap = {all: 'All', good: 'Good with neighbors', neutral: 'Neutral', bad: 'Bad with neighbors'};\r\n      return (\r\n        <div className=\"mb-2\">\r\n          <ToggleButtonGroup\r\n            type=\"radio\"\r\n            name=\"currentPlantGroupFilter\"\r\n            value={this.state.currentPlantGroup}\r\n            onChange={(value) => { this.setState({ currentPlantGroup: value }) }}\r\n            className=\"bg-light\"\r\n          >\r\n            {Object.entries(this.props.plantGroups).map(([group, plantList]) => {\r\n              return (\r\n                <ToggleButton\r\n                  size=\"sm\"\r\n                  className=\"text-left\"\r\n                  variant=\"outline-secondary\"\r\n                  value={group}\r\n                  key={group}\r\n                >\r\n                  {groupNameMap[group]}\r\n                </ToggleButton>\r\n              )\r\n            })\r\n            }\r\n          </ToggleButtonGroup>\r\n        </div>\r\n      )\r\n    }\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <Modal\r\n        show={this.props.show}\r\n        onHide={this.props.handleHide}\r\n        scrollable\r\n      >\r\n        <Modal.Header closeButton className=\"bg-pastel-green\">\r\n          Plant Picker\r\n        </Modal.Header>\r\n        <Modal.Body>\r\n          {this.renderFilters()}\r\n          {this.renderPlantList()}\r\n        </Modal.Body>\r\n      </Modal>\r\n    );\r\n  }\r\n}\r\n\r\nPlantPicker.propTypes = propTypes;\r\n\r\nexport default PlantPicker;","import beet from './beet.svg';\r\nimport carrot from './carrot.svg';\r\nimport garlic from './garlic.svg';\r\nimport leek from './leek.svg';\r\nimport lettuce from './lettuce.svg';\r\nimport onion from './onion.svg';\r\nimport peas from './peas.svg';\r\nimport radish from './radish.svg';\r\nimport spinach from './spinach.svg';\r\nimport strawberry from './strawberry.svg';\r\nimport tomato from './tomato.svg';\r\n\r\nconst sources = {\r\n    beet: beet,\r\n    carrot: carrot,\r\n    garlic: garlic,\r\n    leek: leek,\r\n    lettuce: lettuce,\r\n    onion: onion,\r\n    pea: peas,\r\n    radish: radish,\r\n    spinach: spinach,\r\n    strawberry: strawberry,\r\n    tomato: tomato\r\n};\r\n\r\nfunction plantImgSrc(plantName) {\r\n    return sources[plantName];\r\n}\r\n\r\nexport default plantImgSrc;","import '../App.css';\r\nimport '../index.css';\r\nimport '../images/plants.css';\r\nimport './SquareFootPlot.css';\r\nimport React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport Plant from '../models/Plant';\r\nimport Layout from '../models/Layout';\r\nimport plantImgSrc from '../images/plantImages';\r\n\r\n\r\nconst propTypes = {\r\n  id: PropTypes.string.isRequired,\r\n  plant: PropTypes.instanceOf(Plant),\r\n  layout: PropTypes.instanceOf(Layout),\r\n  onClick: PropTypes.func.isRequired\r\n};\r\n\r\nclass SquareFootPlot extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n  }\r\n\r\n  renderPlants() {\r\n    if (!(this.props.plant)) {\r\n      return null;\r\n    } else {\r\n      const gridCellStyle = (row, col) => {return {gridArea: `${row + 1} / ${col + 1} / auto / auto`}};\r\n      return (\r\n        this.props.layout.fill.map(([row, col], i) => {\r\n          return (\r\n            <div\r\n              className=\"plant\"\r\n              style={gridCellStyle(row, col)}\r\n              key={i}\r\n            >\r\n              <div className={`bg ${this.props.plant.className}`}>\r\n              </div>\r\n            </div>\r\n          );\r\n        })\r\n      );\r\n    }\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <button\r\n        className=\"plot\"\r\n        id={this.props.id}\r\n        onClick={this.props.onClick}\r\n      >\r\n        <div\r\n          className=\"plants\"\r\n          style={(this.props.layout) ? this.props.layout.styles : null}\r\n        >\r\n          {this.renderPlants()}\r\n        </div>\r\n      </button>\r\n    );\r\n  }\r\n}\r\n\r\nSquareFootPlot.propTypes = propTypes;\r\n\r\nexport default SquareFootPlot;\r\n\r\n\r\n// so my desired layout is:\r\n//   <plot, this is the container of a fixed size, className=\"plot\">\r\n//     <plants styles=layout.styles className=\"plants\">\r\n//       <plant>\r\n//         <bg></bg>\r\n//       </plant>\r\n//       <plant>\r\n//         <bg></bg>\r\n//       </plant>\r\n//       ...\r\n//     </plants>\r\n//   </plot>\r\n\r\n// So we have:\r\n\r\n// The board/container <div>:\r\n//     #board {\r\n//         position: relative;\r\n//         width: 50vw;\r\n//         height: 50vw;\r\n//         min-width: 300px;\r\n//         min-height: 300px;\r\n//         overflow: hidden;\r\n//         border: 12px solid #6D5720;\r\n//         border-radius: 12px;\r\n//     }\r\n\r\n//     The plants grid <div>:\r\n//         #plants {\r\n//             z-index: 30;\r\n//         }\r\n//         #garden, #plants, #soil, #overlay {\r\n//             display: grid;\r\n//             grid-template-columns: 20% 20% 20% 20% 20%;\r\n//             grid-template-rows: 20% 20% 20% 20% 20%;\r\n//             position: absolute;\r\n//             top: 0;\r\n//             left: 0;\r\n//             width: 100%;\r\n//             height: 100%;\r\n//         }\r\n\r\n//         The individual plant <div>s:\r\n//             Each has a style indicating grid location.\r\n//             Format is style=\"grid-area: <row> / <col> / auto / auto;\" (where row & col start at 1, not 0)\r\n//             Each has class \"plant <plantName>\"\r\n//             .plant, .treatment {\r\n//                 position: relative;\r\n//                 width: 100%;\r\n//                 height: 100%;\r\n//                 overflow: hidden;\r\n//             }\r\n\r\n//             The child <div> with class=\"bg\":\r\n//                 It inherits the parent's \"plant <plantName>\" class. \r\n//                 So the class attributes end up being something like:\r\n//                 .plant.carrot .bg {\r\n//                     background-image: url(../images/carrots.svg);\r\n//                 }\r\n//                 .plant .bg, .treatment .bg {\r\n//                     width: 100%;\r\n//                     height: 100%;\r\n//                     background-position: left top;\r\n//                     background-size: calc(10vw - 4px);\r\n//                 }\r\n\r\n//     The soil grid <div>:\r\n//         #soil {\r\n//             background-color: #523D1F;\r\n//             overflow: hidden;\r\n//         }\r\n//         #garden, #plants, #soil, #overlay {\r\n//             display: grid;\r\n//             grid-template-columns: 20% 20% 20% 20% 20%;\r\n//             grid-template-rows: 20% 20% 20% 20% 20%;\r\n//             position: absolute;\r\n//             top: 0;\r\n//             left: 0;\r\n//             width: 100%;\r\n//             height: 100%;\r\n//         }\r\n\r\n//         The plot <div>s:\r\n//             .plot {\r\n//                 width: 100%;\r\n//                 height: 100%;\r\n//                 background-color: #6F532A;\r\n//                 background-color: #836B32;\r\n//                 background-image: url(../images/dirt.svg);\r\n//                 background-size: calc(10vw - 4px);\r\n//             }\r\n\r\n","import Plant from './Plant';\r\nimport Layout from './Layout';\r\n\r\n\r\nclass Plot {\r\n    constructor(plant = null, layout = null) {\r\n        this.plant = plant;\r\n        this.layout = layout;\r\n        this.plantPickerOptionGroups = this.plantPickerOptionGroups.bind(this);\r\n    }\r\n\r\n    plantPickerOptionGroups(neighboringPlants) {\r\n        const groups = {};\r\n        const [goodIds, neutralIds, badIds] = [new Set(), new Set(), new Set()];\r\n        // If there are no neighbors to consider, any plant is a good choice!\r\n        if (neighboringPlants.length === 0) {\r\n            Plant.allObjects().forEach(plant => goodIds.add(plant.id));\r\n        } else {\r\n            // Start with all plants in the NEUTRAL set.\r\n            Plant.allObjects().forEach(plant => neutralIds.add(plant.id));\r\n            // Move everything that's GOOD for one of the neighbors into the good set.\r\n            neighboringPlants.forEach(plant => {\r\n                plant.goodNeighborIds.forEach(id => {\r\n                    neutralIds.delete(id);\r\n                    goodIds.add(id);\r\n                });\r\n            });\r\n            // Then move anything that's BAD for neighbor(s) into the bad set.\r\n            // This has to come last, so it can override any 'good' matches.\r\n            neighboringPlants.forEach(plant => {\r\n                plant.badNeighborIds.forEach(id => {\r\n                    neutralIds.delete(id);\r\n                    goodIds.delete(id);\r\n                    badIds.add(id);\r\n                });\r\n            })\r\n        }\r\n        // Convert each set with >0 entries into an array and add it to the plant groups.\r\n        [['good', goodIds], ['neutral', neutralIds], ['bad', badIds]].forEach(\r\n            ([name, idSet]) => {\r\n                if (idSet.size > 0) {\r\n                    groups[name] = Array.from(idSet).map(id => Plant.getObject(id));\r\n                }\r\n            }\r\n        );\r\n        return groups;\r\n    }\r\n}\r\n\r\nexport default Plot;","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport Button from 'react-bootstrap/Button';\r\nimport ButtonGroup from 'react-bootstrap/ButtonGroup';\r\nimport ButtonToolbar from 'react-bootstrap/ButtonToolbar';\r\nimport Container from 'react-bootstrap/Container';\r\nimport Row from 'react-bootstrap/Row';\r\nimport Col from 'react-bootstrap/Col';\r\nimport Card from 'react-bootstrap/Card';\r\nimport Modal from 'react-bootstrap/Modal';\r\nimport { Navbar, Nav, Form, FormControl } from 'react-bootstrap';\r\nimport ListGroup from 'react-bootstrap/ListGroup';\r\nimport SplitButton from 'react-bootstrap/SplitButton';\r\nimport PlantPicker from './components/PlantPicker';\r\nimport SquareFootPlot from './components/SquareFootPlot';\r\nimport undoIcon from './images/undo.svg';\r\nimport redoIcon from './images/redo.svg';\r\nimport Header from './components/Header.js';\r\nimport Plant from './models/Plant';\r\nimport Layout from './models/Layout';\r\nimport Plot from './models/Plot';\r\n\r\n\r\nclass View extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      numRows: 4,\r\n      numCols: 4,\r\n      grid: Array(4).fill().map(row => new Array(4).fill().map(col => new Plot())),\r\n      showPlantPicker: false,\r\n    };\r\n    this.addRow = this.addRow.bind(this);\r\n    this.handleGridClick = this.handleGridClick.bind(this);\r\n    this.clickedRow = null;\r\n    this.clickedCol = null;\r\n    this.history = [];\r\n  }\r\n\r\n  componentDidMount() {\r\n    Plant.loadObjectsFromApi();\r\n    Layout.loadObjectsFromApi();\r\n  }\r\n\r\n  renderUndo() {\r\n    if (this.history.length === 0) {\r\n      return <Button variant=\"outline-secondary\" className=\"disabled\" disabled><img src={undoIcon} /></Button>;\r\n    } else {\r\n      let undoFcn = () => { let g = this.history.pop(); console.log('yaboii', g); this.setState({ grid: g }) };\r\n      return <Button variant=\"outline-secondary\" onClick={() => { this.undo() }}><img src={undoIcon} /></Button>;\r\n    }\r\n  }\r\n\r\n  undo() {\r\n    let g = this.history.pop();\r\n    this.setState((state) => {\r\n      return {\r\n        grid: g,\r\n      }\r\n    });\r\n  }\r\n\r\n  renderHeader() {\r\n    const buttonClass = \"mr-0\";\r\n    return (\r\n      <ButtonToolbar aria-label=\"Controls\">\r\n        <ButtonGroup className=\"mx-2\" aria-label=\"Add rows and columns\">\r\n          <Button variant=\"outline-success\" size=\"sm\" className={buttonClass} onClick={() => { this.addRow() }}>\r\n            Add Row\r\n          </Button>\r\n          <Button variant=\"outline-success\" size=\"sm\" className={buttonClass} onClick={() => { this.addCol() }}>\r\n            Add Column\r\n          </Button>\r\n        </ButtonGroup>\r\n      </ButtonToolbar>\r\n    );\r\n  }\r\n\r\n  renderBody() {\r\n    return (\r\n      <div>\r\n        <div id=\"gridContainer\" style={this.gridContainerDynamicStyles()}>\r\n          <div id=\"grid\" style={this.gridDynamicStyles()}>\r\n            {this.gridSquares()}\r\n          </div>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n\r\n  gridSquares() {\r\n    let squares = [];\r\n    for (let row = 0; row < this.state.numRows; row++) {\r\n      for (let col = 0; col < this.state.numCols; col++) {\r\n        squares.push(this.renderSquare(row, col));\r\n      }\r\n    }\r\n    return squares;\r\n  }\r\n\r\n  gridContainerDynamicStyles() {\r\n    let unit, squareSize;\r\n    console.log('windowheight', window.innerHeight);\r\n    console.log('windowwidth', window.innerWidth);\r\n    if ((window.innerHeight > window.innerWidth) || (this.state.numCols > this.state.numRows)) {\r\n      unit = 'vw';\r\n      squareSize = Math.floor(70 / this.state.numCols);\r\n    } else {\r\n      unit = 'vh';\r\n      squareSize = Math.floor(70 / this.state.numRows);\r\n    }\r\n    squareSize = Math.max(squareSize, 23);\r\n    return {\r\n      width: `${this.state.numCols * squareSize}${unit}`,\r\n      height: `${this.state.numRows * squareSize}${unit}`,\r\n    };\r\n  }\r\n\r\n  gridDynamicStyles() {\r\n    return {\r\n      gridTemplateRows: `repeat(${this.state.numRows}, 1fr)`,\r\n      gridTemplateColumns: `repeat(${this.state.numCols}, 1fr)`,\r\n    }\r\n  }\r\n\r\n  renderSquare(row, col) {\r\n    const id = `r${row}c${col}`\r\n    const plot = this.state.grid[row][col];\r\n    return (\r\n      <SquareFootPlot\r\n        key={id}\r\n        id={id}\r\n        plant={plot.plant}\r\n        layout={plot.layout}\r\n        onClick={() => { this.handleGridClick(row, col) }}\r\n      />\r\n    );\r\n  }\r\n\r\n  getGridCopy() {\r\n    return this.state.grid.map(row => row.slice());\r\n  }\r\n\r\n  handleGridClick(row, col) {\r\n    this.clickedRow = row;\r\n    this.clickedCol = col;\r\n    this.setState({ showPlantPicker: true });\r\n  }\r\n\r\n  addRow() {\r\n    // let gridCopy = this.state.grid.map(row => row.slice());\r\n    // this.history.push(gridCopy);\r\n    console.log('history', this.history);\r\n    this.setState((state) => {\r\n      return {\r\n        numRows: state.numRows + 1,\r\n        grid: state.grid.concat([new Array(state.numCols).fill().map(col => new Plot())]),\r\n      }\r\n    });\r\n  }\r\n\r\n  delRow(rowNum) {\r\n    this.setState((state) => {\r\n      return {\r\n        numRows: state.numRows - 1,\r\n        grid: state.grid.splice(rowNum, 1),\r\n      }\r\n    });\r\n  }\r\n\r\n  addCol() {\r\n    this.setState((state) => {\r\n      return {\r\n        numCols: state.numCols + 1,\r\n        grid: state.grid.map(row => row.slice().concat([new Plot()])),\r\n      }\r\n    })\r\n  }\r\n\r\n  handlePlantPickerSelection(plant, layout) {\r\n    const gridCopy = this.state.grid.map(row => row.slice());\r\n    const plot = gridCopy[this.clickedRow][this.clickedCol];\r\n    Object.assign(plot, { plant: plant, layout: layout });\r\n    this.clickedRow = null;\r\n    this.clickedCol = null;\r\n    this.setState({\r\n      grid: gridCopy,\r\n      showPlantPicker: false,\r\n    });\r\n  }\r\n\r\n  renderPlantPicker() {\r\n    if (this.state.showPlantPicker === false) {\r\n      return null;\r\n    } else {\r\n      // Determine what plants are adjacent to the selected plot...this influences the search results.\r\n      const plotRow = this.clickedRow;\r\n      const plotCol = this.clickedCol;\r\n      const validLoc = (row, col) => (\r\n        row >= 0\r\n        && row < this.state.numRows\r\n        && col >= 0\r\n        && col < this.state.numCols\r\n        && `${row}_${col}` !== `${plotRow}_${plotCol}`\r\n      );\r\n      const getPlantAtLoc = (row, col) => this.state.grid[row][col].plant;\r\n      const neighborPlants = [];\r\n      [plotRow - 1, plotRow, plotRow + 1].forEach(row => {\r\n        [plotCol - 1, plotCol, plotCol + 1].forEach(col => {\r\n          if (validLoc(row, col) && getPlantAtLoc(row, col)) {\r\n            neighborPlants.push(getPlantAtLoc(row, col));\r\n          }\r\n        });\r\n      });\r\n      const plantGroups = this.state.grid[plotRow][plotCol].plantPickerOptionGroups(neighborPlants);\r\n      return (\r\n        <PlantPicker\r\n          show={true}\r\n          handleSelect={(plant, layout) => { this.handlePlantPickerSelection(plant, layout) }}\r\n          handleHide={() => { this.setState({ showPlantPicker: false }) }}\r\n          plantGroups={plantGroups}\r\n          neighborPlants={neighborPlants}\r\n        />\r\n      );\r\n    }\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <Container fluid className=\"mt-2 p-1\">\r\n        {this.renderPlantPicker()}\r\n        <Card className=\"h-75\">\r\n          <Card.Header>{this.renderHeader()}</Card.Header>\r\n          <Card.Body\r\n            className=\"align-content-center m-2 overflow-auto p-0\"\r\n            style={{ maxHeight: '70vh', overflowY: 'auto' }}\r\n          >\r\n            {this.renderBody()}\r\n          </Card.Body>\r\n        </Card>\r\n      </Container>\r\n    );\r\n  }\r\n}\r\n\r\nexport default View;\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n","module.exports = __webpack_public_path__ + \"static/media/undo.42f85826.svg\";","module.exports = __webpack_public_path__ + \"static/media/beet.ee995698.svg\";","module.exports = __webpack_public_path__ + \"static/media/carrot.2266c860.svg\";","module.exports = __webpack_public_path__ + \"static/media/garlic.e1631c50.svg\";","module.exports = __webpack_public_path__ + \"static/media/leek.f6dc4275.svg\";","module.exports = __webpack_public_path__ + \"static/media/lettuce.bf643227.svg\";","module.exports = __webpack_public_path__ + \"static/media/onion.6e5e1a95.svg\";","module.exports = __webpack_public_path__ + \"static/media/peas.ec871284.svg\";","module.exports = __webpack_public_path__ + \"static/media/radish.43c53b88.svg\";","module.exports = __webpack_public_path__ + \"static/media/spinach.fb59bf7b.svg\";","module.exports = __webpack_public_path__ + \"static/media/strawberry.b7931bae.svg\";","module.exports = __webpack_public_path__ + \"static/media/tomato.4826181a.svg\";","module.exports = __webpack_public_path__ + \"static/media/logo.25bf045c.svg\";"],"sourceRoot":""}