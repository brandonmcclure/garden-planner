{"version":3,"sources":["images/redo.svg","components/Header.js","App.js","serviceWorker.js","models/Layout.js","models/Plant.js","components/PlantPicker.js","components/SquareFootPlot.js","models/Plot.js","index.js","images/undo.svg","logo.svg"],"names":["module","exports","Header","Navbar","expand","className","Brand","href","Toggle","aria-controls","Collapse","id","Nav","activeKey","Link","React","Component","App","Boolean","window","location","hostname","match","layoutObjects","Layout","resource","this","rows","cols","fill","styles","display","gridTemplateRows","gridTemplateColumns","top","left","width","height","points","row","col","push","allPoints","filled","map","JSON","stringify","cellFilledStates","p","includes","find","layout","fetch","then","response","status","json","data","forEach","plantObjects","Plant","name","namePlural","name_plural","scientificName","scientific_name","layoutIds","layouts","goodNeighborIds","good_neighbors","badNeighborIds","bad_neighbors","toLowerCase","replace","imageName","defaultLayout","bind","getObject","plant","PlantPicker","props","state","currentPlantGroup","Object","keys","plantGroups","plants","sort","a","b","localeCompare","Item","action","key","onClick","handleSelect","length","groupNameMap","all","good","neutral","bad","type","value","onChange","setState","entries","group","size","variant","show","onHide","handleHide","scrollable","closeButton","Body","renderFilters","renderPlantList","SquareFootPlot","i","cellClass","style","renderPlants","Plot","plantPickerOptionGroups","neighboringPlants","groups","goodIds","Set","neutralIds","badIds","allObjects","add","delete","idSet","Array","from","View","numRows","numCols","grid","showPlantPicker","addRow","handleGridClick","clickedRow","clickedCol","history","loadObjectsFromApi","disabled","src","undoIcon","undo","g","pop","aria-label","addCol","gridContainerDynamicStyles","gridDynamicStyles","gridSquares","squares","renderSquare","unit","squareSize","console","log","innerHeight","innerWidth","Math","floor","max","plot","slice","concat","rowNum","splice","gridCopy","assign","plotRow","plotCol","getPlantAtLoc","neighborPlants","validLoc","handlePlantPickerSelection","fluid","renderPlantPicker","renderHeader","maxHeight","overflowY","renderBody","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.d1f8713d.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/redo.d2107f44.svg\";","import React from 'react';\r\nimport { Navbar, Nav, Form, FormControl, Button } from 'react-bootstrap';\r\nimport '../App.css';\r\n\r\nclass Header extends React.Component {\r\n  render() {\r\n    return (\r\n      <Navbar expand=\"md\" className=\"bg-pastel-green\">\r\n        <Navbar.Brand href=\"#home\">Penny's Garden Planner</Navbar.Brand>\r\n        <Navbar.Toggle aria-controls=\"navbar-actions\" />\r\n        <Navbar.Collapse id=\"navbar-actions\">\r\n          <Nav className=\"mr-auto\" activeKey={\"#home\"}>\r\n            <Nav.Link href=\"#home\">Designer</Nav.Link>\r\n            <Nav.Link href=\"#features\">About</Nav.Link>\r\n            <Nav.Link href=\"#pricing\">Contact</Nav.Link>\r\n          </Nav>\r\n        </Navbar.Collapse>\r\n      </Navbar>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Header;","import React from 'react';\nimport logo from './logo.svg';\nimport Header from './components/Header.js';\nimport View from './index.js';\nimport ListGroup from 'react-bootstrap/ListGroup';\nimport './App.css';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\n\n\n// class Thingy extends React.Component {\n\n//     state = {\n//         data: '',\n//         loaded: false,\n//         placeholder: \"Loading...\"\n//     };\n\n//     componentDidMount() {\n//         fetch('/backend/plants/')\n//             .then(response => {\n//                 if (response.status !== 200) {\n//                     return this.setState({ placeholder: \"Something went wrong\" });\n//                 } else {\n//                     return response.json();\n//                 }\n//             })\n//             .then(data => this.setState({ data: data, loaded: true }));\n//     }\n\n//     renderOne(plant) {\n//       return (\n//         <ListGroup.Item\n//           key={plant.id}\n//         >\n//         {plant.name}\n//         </ListGroup.Item>\n//       );\n//     }\n\n//     render() {\n//         const { data, loaded, placeholder } = this.state;\n//         if (!loaded) {\n//           return <p>{placeholder}</p>;\n//         } else {\n//           return (\n//             <ListGroup>\n//               {this.state.data.map(plant => this.renderOne(plant))}\n//             </ListGroup>\n//           );\n//         }\n//     }\n// }\n\n\n// function App() {\n//   return (\n//     <div className=\"App\">\n//       <View />\n//     </div>\n//   );\n// }\n\nfunction App() {\n  return (\n    <div>\n      <Header />\n      <View />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","const layoutObjects = [];\r\n\r\n\r\nexport default class Layout {\r\n  constructor(resource) {\r\n    this.id = resource.id;\r\n    this.rows = resource.rows;\r\n    this.cols = resource.cols;\r\n    this.fill = resource.fill;\r\n    this.styles = {\r\n        display: 'grid',\r\n        gridTemplateRows: `repeat(${resource.rows}, 1fr)`,\r\n        gridTemplateColumns: `repeat(${resource.cols}, 1fr)`,\r\n        top: 0,\r\n        left: 0,\r\n        width: '95%',\r\n        height: '95%',\r\n    };\r\n    // create an ordered list of [row, col] pairs for all the points in this layout.\r\n    let points = [];\r\n    for (let row = 0 ; row < resource.rows ; row++ ) {\r\n      for (let col = 0 ; col < resource.cols ; col++ ) {\r\n        points.push([row, col]);\r\n      }\r\n    }\r\n    this.allPoints = points;\r\n    // create a row-major ordered list of booleans indicating which points are filled\r\n    const filled = resource.fill.map(JSON.stringify);\r\n    this.cellFilledStates = points.map(p => (filled.includes(JSON.stringify(p))) ? true : false);\r\n  }\r\n\r\n  static getObject(id) {\r\n    return layoutObjects.find(layout => layout.id == id);\r\n  }\r\n\r\n  static allObjects() {\r\n    return layoutObjects;\r\n  }\r\n\r\n  static loadObjectsFromApi() {\r\n    fetch('/backend/layouts/')\r\n      .then(response => {\r\n        return (response.status === 200) ? response.json() : null;\r\n      })\r\n      .then(data => {\r\n        if (data) {\r\n          data.forEach(resource => layoutObjects.push(new Layout(resource)));\r\n        }\r\n      });\r\n  }\r\n}","import Layout from './Layout';\r\n\r\nconst plantObjects = [];\r\n\r\n\r\nexport default class Plant {\r\n  constructor(resource) {\r\n    this.id = resource.id;\r\n    this.name = resource.name;\r\n    this.namePlural = resource.name_plural;\r\n    this.scientificName = resource.scientific_name;\r\n    this.layoutIds = resource.layouts;\r\n    this.goodNeighborIds = resource.good_neighbors;\r\n    this.badNeighborIds = resource.bad_neighbors;\r\n    this.className = resource.name.toLowerCase().replace(/ /g, '-');\r\n    this.imageName = resource.name.toLowerCase().replace(/ /g, '-') + '.svg';\r\n    this.defaultLayout = this.defaultLayout.bind(this);\r\n  }\r\n\r\n  static getObject(id) {\r\n    return plantObjects.find(plant => plant.id == id);\r\n  }\r\n\r\n  static allObjects() {\r\n    return plantObjects;\r\n  }\r\n\r\n  static loadObjectsFromApi() {\r\n    fetch('/backend/plants/')\r\n      .then(response => {\r\n        return (response.status === 200) ? response.json() : null;\r\n      })\r\n      .then(data => {\r\n        if (data) {\r\n          data.forEach(resource => plantObjects.push(new Plant(resource)));\r\n        }\r\n      });\r\n  }\r\n\r\n  defaultLayout() {\r\n    return Layout.getObject(this.layoutIds[0]);\r\n  }\r\n}","import '../App.css';\r\nimport React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport Button from 'react-bootstrap/Button';\r\nimport ToggleButtonGroup from 'react-bootstrap/ToggleButtonGroup';\r\nimport ToggleButton from 'react-bootstrap/ToggleButton';\r\nimport Modal from 'react-bootstrap/Modal';\r\nimport ListGroup from 'react-bootstrap/ListGroup';\r\nimport Tabs from 'react-bootstrap/Tabs';\r\nimport Tab from 'react-bootstrap/Tab';\r\nimport Plant from '../models/Plant';\r\nimport Layout from '../models/Layout';\r\n\r\n\r\nconst propTypes = {\r\n  show: PropTypes.bool.isRequired,\r\n  handleSelect: PropTypes.func.isRequired,\r\n  handleHide: PropTypes.func.isRequired,\r\n  plantGroups: PropTypes.object.isRequired,\r\n  neighborPlants: PropTypes.arrayOf(\r\n    PropTypes.instanceOf(Plant)\r\n  ).isRequired\r\n}\r\n\r\nclass PlantPicker extends React.Component {\r\n\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      currentPlantGroup: Object.keys(props.plantGroups)[0],\r\n    };\r\n  }\r\n\r\n  renderPlantList() {\r\n    const sortFunc = (a, b) => a.namePlural.localeCompare(b.namePlural);\r\n    const plants = (this.state.currentPlantGroup) ? this.props.plantGroups[this.state.currentPlantGroup] : [];\r\n    return (\r\n      <ListGroup>\r\n        {plants\r\n          .sort(sortFunc)\r\n          .map(plant => {\r\n            return (\r\n              <ListGroup.Item\r\n                action\r\n                key={plant.id}\r\n                onClick={() => this.props.handleSelect(plant, plant.defaultLayout())}\r\n              >\r\n                <div className={`${plant.className} bg-icon-right`}>{plant.namePlural}</div>\r\n              </ListGroup.Item>\r\n            )\r\n          })}\r\n      </ListGroup>\r\n    )\r\n  }\r\n\r\n  renderFilters() {\r\n    if (Object.keys(this.props.plantGroups).length === 1) {\r\n      return null;\r\n    } else {\r\n      const groupNameMap = {all: 'All', good: 'Good with neighbors', neutral: 'Neutral', bad: 'Bad with neighbors'};\r\n      return (\r\n        <div className=\"mb-2\">\r\n          <ToggleButtonGroup\r\n            type=\"radio\"\r\n            name=\"currentPlantGroupFilter\"\r\n            value={this.state.currentPlantGroup}\r\n            onChange={(value) => { this.setState({ currentPlantGroup: value }) }}\r\n            className=\"bg-light\"\r\n          >\r\n            {Object.entries(this.props.plantGroups).map(([group, plantList]) => {\r\n              return (\r\n                <ToggleButton\r\n                  size=\"sm\"\r\n                  className=\"text-left\"\r\n                  variant=\"outline-secondary\"\r\n                  value={group}\r\n                  key={group}\r\n                >\r\n                  {groupNameMap[group]}\r\n                </ToggleButton>\r\n              )\r\n            })\r\n            }\r\n          </ToggleButtonGroup>\r\n        </div>\r\n      )\r\n    }\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <Modal\r\n        show={this.props.show}\r\n        onHide={this.props.handleHide}\r\n        scrollable\r\n      >\r\n        <Modal.Header closeButton className=\"bg-pastel-green\">\r\n          Plant Picker\r\n        </Modal.Header>\r\n        <Modal.Body>\r\n          {this.renderFilters()}\r\n          {this.renderPlantList()}\r\n        </Modal.Body>\r\n      </Modal>\r\n    );\r\n  }\r\n}\r\n\r\nPlantPicker.propTypes = propTypes;\r\n\r\nexport default PlantPicker;","import '../App.css';\r\nimport '../index.css';\r\nimport React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport Plant from '../models/Plant';\r\nimport Layout from '../models/Layout';\r\n\r\n\r\nconst propTypes = {\r\n  id: PropTypes.string.isRequired,\r\n  plant: PropTypes.instanceOf(Plant),\r\n  layout: PropTypes.instanceOf(Layout),\r\n  onClick: PropTypes.func.isRequired\r\n};\r\n\r\nclass SquareFootPlot extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n  }\r\n\r\n  renderPlants() {\r\n    if (!(this.props.plant)) {\r\n      return null;\r\n    } else {\r\n      return (\r\n        this.props.layout.cellFilledStates\r\n          .map((filled, i) => {\r\n            const cellClass = (filled) ? `${this.props.plant.className} bg-90pct-center` : 'bg-90pct-center';\r\n            return <div className={cellClass} key={i}></div>;\r\n          })\r\n      );\r\n    }\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <button\r\n        className=\"plot\"\r\n        id={this.props.id}\r\n        onClick={this.props.onClick}\r\n      >\r\n        <div\r\n          className=\"plants\"\r\n          style={(this.props.layout) ? this.props.layout.styles : {}}\r\n        >\r\n          {this.renderPlants()}\r\n        </div>\r\n      </button>\r\n    );\r\n  }\r\n}\r\n\r\nSquareFootPlot.propTypes = propTypes;\r\n\r\nexport default SquareFootPlot;","import Plant from './Plant';\r\nimport Layout from './Layout';\r\n\r\n\r\nclass Plot {\r\n    constructor(plant = null, layout = null) {\r\n        this.plant = plant;\r\n        this.layout = layout;\r\n        this.plantPickerOptionGroups = this.plantPickerOptionGroups.bind(this);\r\n    }\r\n\r\n    plantPickerOptionGroups(neighboringPlants) {\r\n        const groups = {};\r\n        const [goodIds, neutralIds, badIds] = [new Set(), new Set(), new Set()];\r\n        // If there are no neighbors to consider, any plant is a good choice!\r\n        if (neighboringPlants.length === 0) {\r\n            Plant.allObjects().forEach(plant => goodIds.add(plant.id));\r\n        } else {\r\n            // Start with all plants in the NEUTRAL set.\r\n            Plant.allObjects().forEach(plant => neutralIds.add(plant.id));\r\n            // Move everything that's GOOD for one of the neighbors into the good set.\r\n            neighboringPlants.forEach(plant => {\r\n                plant.goodNeighborIds.forEach(id => {\r\n                    neutralIds.delete(id);\r\n                    goodIds.add(id);\r\n                });\r\n            });\r\n            // Then move anything that's BAD for neighbor(s) into the bad set.\r\n            // This has to come last, so it can override any 'good' matches.\r\n            neighboringPlants.forEach(plant => {\r\n                plant.badNeighborIds.forEach(id => {\r\n                    neutralIds.delete(id);\r\n                    goodIds.delete(id);\r\n                    badIds.add(id);\r\n                });\r\n            })\r\n        }\r\n        // Convert each set with >0 entries into an array and add it to the plant groups.\r\n        [['good', goodIds], ['neutral', neutralIds], ['bad', badIds]].forEach(\r\n            ([name, idSet]) => {\r\n                if (idSet.size > 0) {\r\n                    groups[name] = Array.from(idSet).map(id => Plant.getObject(id));\r\n                }\r\n            }\r\n        );\r\n        return groups;\r\n    }\r\n}\r\n\r\nexport default Plot;","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport Button from 'react-bootstrap/Button';\r\nimport ButtonGroup from 'react-bootstrap/ButtonGroup';\r\nimport ButtonToolbar from 'react-bootstrap/ButtonToolbar';\r\nimport Container from 'react-bootstrap/Container';\r\nimport Row from 'react-bootstrap/Row';\r\nimport Col from 'react-bootstrap/Col';\r\nimport Card from 'react-bootstrap/Card';\r\nimport Modal from 'react-bootstrap/Modal';\r\nimport { Navbar, Nav, Form, FormControl } from 'react-bootstrap';\r\nimport ListGroup from 'react-bootstrap/ListGroup';\r\nimport SplitButton from 'react-bootstrap/SplitButton';\r\nimport PlantPicker from './components/PlantPicker';\r\nimport SquareFootPlot from './components/SquareFootPlot';\r\nimport undoIcon from './images/undo.svg';\r\nimport redoIcon from './images/redo.svg';\r\nimport Header from './components/Header.js';\r\nimport Plant from './models/Plant';\r\nimport Layout from './models/Layout';\r\nimport Plot from './models/Plot';\r\n\r\n\r\nclass View extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      numRows: 4,\r\n      numCols: 4,\r\n      grid: Array(4).fill().map(row => new Array(4).fill().map(col => new Plot())),\r\n      showPlantPicker: false,\r\n    };\r\n    this.addRow = this.addRow.bind(this);\r\n    this.handleGridClick = this.handleGridClick.bind(this);\r\n    this.clickedRow = null;\r\n    this.clickedCol = null;\r\n    this.history = [];\r\n  }\r\n\r\n  componentDidMount() {\r\n    Plant.loadObjectsFromApi();\r\n    Layout.loadObjectsFromApi();\r\n  }\r\n\r\n  renderUndo() {\r\n    if (this.history.length === 0) {\r\n      return <Button variant=\"outline-secondary\" className=\"disabled\" disabled><img src={undoIcon} /></Button>;\r\n    } else {\r\n      let undoFcn = () => { let g = this.history.pop(); console.log('yaboii', g); this.setState({ grid: g }) };\r\n      return <Button variant=\"outline-secondary\" onClick={() => { this.undo() }}><img src={undoIcon} /></Button>;\r\n    }\r\n  }\r\n\r\n  undo() {\r\n    let g = this.history.pop();\r\n    this.setState((state) => {\r\n      return {\r\n        grid: g,\r\n      }\r\n    });\r\n  }\r\n\r\n  renderHeader() {\r\n    const buttonClass = \"mr-0\";\r\n    return (\r\n      <ButtonToolbar aria-label=\"Controls\">\r\n        <ButtonGroup className=\"mx-2\" aria-label=\"Add rows and columns\">\r\n          <Button variant=\"outline-success\" size=\"sm\" className={buttonClass} onClick={() => { this.addRow() }}>\r\n            Add Row\r\n          </Button>\r\n          <Button variant=\"outline-success\" size=\"sm\" className={buttonClass} onClick={() => { this.addCol() }}>\r\n            Add Column\r\n          </Button>\r\n        </ButtonGroup>\r\n      </ButtonToolbar>\r\n    );\r\n  }\r\n\r\n  renderBody() {\r\n    return (\r\n      <div>\r\n        <div id=\"gridContainer\" style={this.gridContainerDynamicStyles()}>\r\n          <div id=\"grid\" style={this.gridDynamicStyles()}>\r\n            {this.gridSquares()}\r\n          </div>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n\r\n  gridSquares() {\r\n    let squares = [];\r\n    for (let row = 0; row < this.state.numRows; row++) {\r\n      for (let col = 0; col < this.state.numCols; col++) {\r\n        squares.push(this.renderSquare(row, col));\r\n      }\r\n    }\r\n    return squares;\r\n  }\r\n\r\n  gridContainerDynamicStyles() {\r\n    let unit, squareSize;\r\n    console.log('windowheight', window.innerHeight);\r\n    console.log('windowwidth', window.innerWidth);\r\n    if ((window.innerHeight > window.innerWidth) || (this.state.numCols > this.state.numRows)) {\r\n      unit = 'vw';\r\n      squareSize = Math.floor(70 / this.state.numCols);\r\n    } else {\r\n      unit = 'vh';\r\n      squareSize = Math.floor(70 / this.state.numRows);\r\n    }\r\n    squareSize = Math.max(squareSize, 23);\r\n    return {\r\n      width: `${this.state.numCols * squareSize}${unit}`,\r\n      height: `${this.state.numRows * squareSize}${unit}`,\r\n    };\r\n  }\r\n\r\n  gridDynamicStyles() {\r\n    return {\r\n      gridTemplateRows: `repeat(${this.state.numRows}, 1fr)`,\r\n      gridTemplateColumns: `repeat(${this.state.numCols}, 1fr)`,\r\n    }\r\n  }\r\n\r\n  renderSquare(row, col) {\r\n    const id = `r${row}c${col}`\r\n    const plot = this.state.grid[row][col];\r\n    return (\r\n      <SquareFootPlot\r\n        key={id}\r\n        id={id}\r\n        plant={plot.plant}\r\n        layout={plot.layout}\r\n        onClick={() => { this.handleGridClick(row, col) }}\r\n      />\r\n    );\r\n  }\r\n\r\n  getGridCopy() {\r\n    return this.state.grid.map(row => row.slice());\r\n  }\r\n\r\n  handleGridClick(row, col) {\r\n    this.clickedRow = row;\r\n    this.clickedCol = col;\r\n    this.setState({ showPlantPicker: true });\r\n  }\r\n\r\n  addRow() {\r\n    // let gridCopy = this.state.grid.map(row => row.slice());\r\n    // this.history.push(gridCopy);\r\n    console.log('history', this.history);\r\n    this.setState((state) => {\r\n      return {\r\n        numRows: state.numRows + 1,\r\n        grid: state.grid.concat([new Array(state.numCols).fill().map(col => new Plot())]),\r\n      }\r\n    });\r\n  }\r\n\r\n  delRow(rowNum) {\r\n    this.setState((state) => {\r\n      return {\r\n        numRows: state.numRows - 1,\r\n        grid: state.grid.splice(rowNum, 1),\r\n      }\r\n    });\r\n  }\r\n\r\n  addCol() {\r\n    this.setState((state) => {\r\n      return {\r\n        numCols: state.numCols + 1,\r\n        grid: state.grid.map(row => row.slice().concat([new Plot()])),\r\n      }\r\n    })\r\n  }\r\n\r\n  handlePlantPickerSelection(plant, layout) {\r\n    const gridCopy = this.state.grid.map(row => row.slice());\r\n    const plot = gridCopy[this.clickedRow][this.clickedCol];\r\n    Object.assign(plot, { plant: plant, layout: layout });\r\n    this.clickedRow = null;\r\n    this.clickedCol = null;\r\n    this.setState({\r\n      grid: gridCopy,\r\n      showPlantPicker: false,\r\n    });\r\n  }\r\n\r\n  renderPlantPicker() {\r\n    if (this.state.showPlantPicker === false) {\r\n      return null;\r\n    } else {\r\n      // Determine what plants are adjacent to the selected plot...this influences the search results.\r\n      const plotRow = this.clickedRow;\r\n      const plotCol = this.clickedCol;\r\n      const validLoc = (row, col) => (\r\n        row >= 0\r\n        && row < this.state.numRows\r\n        && col >= 0\r\n        && col < this.state.numCols\r\n        && `${row}_${col}` !== `${plotRow}_${plotCol}`\r\n      );\r\n      const getPlantAtLoc = (row, col) => this.state.grid[row][col].plant;\r\n      const neighborPlants = [];\r\n      [plotRow - 1, plotRow, plotRow + 1].forEach(row => {\r\n        [plotCol - 1, plotCol, plotCol + 1].forEach(col => {\r\n          if (validLoc(row, col) && getPlantAtLoc(row, col)) {\r\n            neighborPlants.push(getPlantAtLoc(row, col));\r\n          }\r\n        });\r\n      });\r\n      const plantGroups = this.state.grid[plotRow][plotCol].plantPickerOptionGroups(neighborPlants);\r\n      return (\r\n        <PlantPicker\r\n          show={true}\r\n          handleSelect={(plant, layout) => { this.handlePlantPickerSelection(plant, layout) }}\r\n          handleHide={() => { this.setState({ showPlantPicker: false }) }}\r\n          plantGroups={plantGroups}\r\n          neighborPlants={neighborPlants}\r\n        />\r\n      );\r\n    }\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <Container fluid className=\"mt-2 p-1\">\r\n        {this.renderPlantPicker()}\r\n        <Card className=\"h-75\">\r\n          <Card.Header>{this.renderHeader()}</Card.Header>\r\n          <Card.Body\r\n            className=\"align-content-center m-2 overflow-auto p-0\"\r\n            style={{ maxHeight: '70vh', overflowY: 'auto' }}\r\n          >\r\n            {this.renderBody()}\r\n          </Card.Body>\r\n        </Card>\r\n      </Container>\r\n    );\r\n  }\r\n}\r\n\r\nexport default View;\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n","module.exports = __webpack_public_path__ + \"static/media/undo.42f85826.svg\";","module.exports = __webpack_public_path__ + \"static/media/logo.25bf045c.svg\";"],"sourceRoot":""}